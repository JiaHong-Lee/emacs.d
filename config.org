#+TITLE:  Zacque's Literate Emacs Config
#+AUTHOR: Lee Jia Hong
#+EMAIL:  jia_hong@live.com.my
#+DATE:   [2018-06-09 Sat]
#+TAGS:   literate emacs config dotfile noexport

* Introduction
#+BEGIN_QUOTE
Energy starts surging through your fingertips. Sparks fly, making
the shadows grow and flicker ominously around you. You arch your
back and open your eyes as if for the first time. The text appears
more vibrant and colourful than you remember. Your fingers dance on
the keyboard commanding the cursor with a joyful precision and
control.

You lean back and marvel as a shimmering swirl of syntactic and
semantic structures project out of the screen and intertwine with a
fractal beauty. You watch as meaning recursively unfolds into deeper
meaning live in front of your eyes. You feel a deep and lasting
synchronicity form as the boundaries between you and your Emacs
wash away. You and your Emacs Live.

M-x start-hacking.

Source: https://github.com/overtone/emacs-live
#+END_QUOTE

Good config:
1. https://github.com/ianpan870102/.personal-emacs.d

This is an attempt to put my Emacs config into an org file. By doing so, my init.el file will contains only two lines of code. The rest is in the config.org file. Note: This code block will be tangled to init.el, so do not edit the init.el file directly.
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el :results none
;;; init.el --- Where all the magic begins. -*- lexical-binding: t -*-

;;; COMMENTARY:
;;----------------------------------------------------------------------------
;;    ___ _ __ ___   __ _  ___ ___
;;   / _ \ '_ ` _ \ / _` |/ __/ __|
;;  |  __/ | | | | | (_| | (__\__ \
;; (_)___|_| |_| |_|\__,_|\___|___/
;;
;;  Citations
;;
;;     "Show me your ~/.emacs and I will tell you who you are."
;;                                                         [Bogdan Maryniuk]
;;
;;     "Emacs is like a laser guided missile. It only has to be slightly
;;      mis-configured to ruin your whole day."
;;                                                            [Sean McGrath]
;;
;;     "While any text editor can save your files, only Emacs can save your
;;      soul."
;;                                                          [Per Abrahamsen]
;;
;; Source: http://www.mygooglest.com/fni/dot-emacs.html
;;----------------------------------------------------------------------------

;;----------------------------------------------------------------------------
;;
;;                __   _,--="=--,_   __
;;               /  \."    .-.    "./  \
;;              /  ,/  _   : :   _  \/` \
;;              \  `| /o\  :_:  /o\ |\__/
;;               `-'| :="~` _ `~"=: |
;;                  \`     (_)     `/
;;           .-"-.   \      |      /   .-"-.
;;      .---{     }--|  /,.-'-.,\  |--{     }---.
;;       )  (_)_)_)  \_/`~-===-~`\_/  (_(_(_)  (
;;      (                                       )
;;       )          Recreating Purcell         (
;;      (            Emacs Experience           )
;;       )                                     (
;;      '---------------------------------------'
;;
;;----------------------------------------------------------------------------

;;; CODE:
;; SOURCE: https://github.com/jamiecollinson/dotfiles/blob/master/.emacs
(org-babel-load-file (concat user-emacs-directory "config.org"))

(provide 'init)
;; Local Variables:
;; coding: utf-8
;; no-byte-compile: t
;; End:

;;; init.el ends here
#+END_SRC
* Bootstrap Config
I use ~use-package~ to organise my Emacs config, to speed up my Emacs init time, and to make sure that a package is installed if it does not already installed. I suspect that there were too many packages loaded on startup previously.
#+BEGIN_SRC emacs-lisp
;;; config.el --- This is the resultant file tangled from config.org -*- lexical-binding: t; -*-
;;; Commentary:

;; 

;;; Code:

;; Defining a sync directory for org uses
(defconst jh/sync-directory "/home/zacque/Dropbox/DropSyncFiles")

;; Setup my .emacs.d directory. Create directories if not already existed
(let* ((subdirs '("lisp" "backups" "themes"))
       (fulldirs (mapcar (lambda (d) (expand-file-name d user-emacs-directory)) subdirs)))
  (dolist (dir fulldirs)
    (when (not (file-exists-p dir))
      (message "Make directory: %s" dir)
      (make-directory dir))))

(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)
(defalias 'yes-or-no-p 'y-or-n-p)

(setq inhibit-startup-screen t)
(setq initial-buffer-choice (expand-file-name "startup.org" jh/sync-directory))
(setq-default initial-scratch-message (concat ";; Happy hacking, " user-login-name " - Emacs ‚ù§ you!\n\n"))

;; Make sure that C-v and M-v returns cursor to the same position.
(setq scroll-preserve-screen-position 'always)

;; Prevent variables from clustering the init.el
(defconst custom-file (expand-file-name "custom.el" user-emacs-directory))
(unless (file-exists-p custom-file)
  (shell-command (concat "touch " custom-file)))
(setq custom-file custom-file)
(load custom-file)

(require 'package)
(setq package-enable-at-startup nil)
(setq package-archives '(("elpa" . "https://elpa.gnu.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))
(package-initialize)

(setq load-prefer-newer t) ;; load .el if it's newer than corresponding .elc
(package-refresh-contents t) ;; auto download package info asynchronously on Emacs startup

(with-eval-after-load 'fullframe
  (fullframe list-packages quit-window))

;; Basics
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile
  (require 'use-package))

(setq use-package-always-ensure t) ;; always install packages that are not installed
(setq use-package-expand-minimally t)

(use-package use-package-ensure-system-package
  ;; Add the :ensure-system-package keyword to ensure some system binaries alongside my package declarations.
  :init (setq system-packages-use-sudo t))
#+END_SRC

Use-package extension ideas:
1. :config-after
   Load the config only after the package X is loaded. E.g.
   #+BEGIN_SRC emacs-lisp :tangle no
   (use-package abc
     :config-after (evil
                    (setq abc abc)
                    (blah blah blah)))
   #+END_SRC
2. :replace/ :override
   Specify that this package replace/override another package X. This is useful to indicate that a package supercede another package. E.g.
   #+BEGIN_SRC emacs-lisp :tangle no
   (use-package symbol-overlay
     :replace highlight-numbers)
   #+END_SRC
3. conditional loading depending on Emacs version
   Can I use :if?

References:
1. https://github.com/jwiegley/use-package
2. https://github.com/waymondo/use-package-ensure-system-package
3. https://gitlab.com/jabranham/system-packages
* Core Packages
Evil and ivy are the core of my configs.
** Evil
#+BEGIN_SRC emacs-lisp
(use-package evil
  ;; evil is an extensible vi layer that emulate the main features of Vim in Emacs. 
  :config
  (evil-mode)
  (define-key evil-motion-state-map [remap evil-next-line] 'evil-next-visual-line)
  (define-key evil-motion-state-map [remap evil-previous-line] 'evil-previous-visual-line)

  ;; C-o is evil-jump-backward, therefore I define C-S-o to evil-jump-forward
  (define-key evil-motion-state-map (kbd "C-S-o") 'evil-jump-forward)

  ;; Set some built-in modes to launch in evil emacs state (in addition to the default).
  (cl-loop for (mode . state) in
	       '((image-mode . emacs)
	         (eww-mode . emacs)
	         (Info-mode . emacs)
	         (calendar-mode . emacs)
	         (process-menu-mode . emacs)
	         (diff-mode . emacs))
	       do (evil-set-initial-state mode state))

  (evil-define-command jh/evil-save-modified-and-close-buffer (file &optional bang)
    "Saves the current buffer and closes the buffer."
    :repeat nil
    (interactive "<f><!>")
    (when (buffer-modified-p)
      (evil-write nil nil nil file bang))
    (kill-buffer))

  (evil-define-command jh/evil-save-and-close-buffer (file &optional bang)
    "Saves the current buffer and closes the window."
    :repeat nil
    (interactive "<f><!>")
    (evil-write nil nil nil file bang)
    (kill-buffer))

  ;; Ex :q should kill the current buffer rather than quitting emacs entirely
  (evil-ex-define-cmd "q" 'kill-this-buffer)

  ;; Type :quit to close emacs
  (evil-ex-define-cmd "quit" 'evil-quit)

  ;; Ex :wq should save and close the buffer, rather than quitting emacs entirely
  (evil-ex-define-cmd "wq" 'jh/evil-save-and-close-buffer)

  ;; Ex :digraphs should show digraphs
  (evil-ex-define-cmd "digraphs" 'evil-ex-show-digraphs)

  ;; Make evil-search similar to Vim's search?
  (evil-select-search-module 'evil-search-module 'evil-search)
  (setq evil-search-wrap t
        evil-regexp-search t)

  (use-package evil-anzu
    ;; Show (current match/total matches) info in the mode-line
    )

  (use-package evil-visual-mark-mode
    ;; Display mark at a point during evil-jump-to-mark
    :hook (evil-mode . evil-visual-mark-mode))

  (use-package evil-matchit
    ;; Use % to jump between HTML tags, Python blocks
    :config (global-evil-matchit-mode))

  (use-package sentence-navigation
    ;; To define sentence as a evil text object
    :config
    (define-key evil-outer-text-objects-map "s" 'sentence-nav-evil-a-sentence)
    (define-key evil-outer-text-objects-map "s" 'sentence-nav-evil-inner-sentence))

  (use-package evil-surround
    ;; Edit surrounding quotes or tags directly
    :config
    (global-evil-surround-mode)

    ;; issue: evil-surround-change inserts unwanted spaces by changes (this-form) to [ this-form ]. References: https://github.com/emacs-evil/evil-surround/issues/86
    ;; use non-spaced pairs when surrounding with an opening brace
    (evil-add-to-alist
     'evil-surround-pairs-alist
     ?\( '("(" . ")")
     ?\[ '("[" . "]")
     ?\{ '("{" . "}")
     ?\) '("( " . " )")
     ?\] '("[ " . " ]")
     ?\} '("{ " . " }")))

  (use-package evil-args
    ;; Edit function arguments as evil textobjects
    :config
    (define-key evil-outer-text-objects-map "a" 'evil-inner-arg)
    (define-key evil-inner-text-objects-map "a" 'evil-outer-arg)

    (defun jh/evil-args-switch-to-c-mode ()
      "Switch evil-args parameters to adapt to C-derivative modes"
      (setq evil-args-delimiters '(", " ";")))

    (add-hook 'c-mode-hook #'jh/evil-args-switch-to-c-mode))

  (use-package evil-numbers
    ;; Increment/decrement numbers. E.g. 1 to 2.
    :config
    (define-key evil-normal-state-map (kbd "<kp-add>") 'evil-numbers/inc-at-pt)
    (define-key evil-normal-state-map (kbd "<kp-subtract>") 'evil-numbers/dec-at-pt))

  (use-package evil-exchange
    ;; Swap two regions of text
    :config
    (define-key evil-operator-state-map "x" 'evil-exchange/cx)
    (define-key evil-visual-state-map "X" 'evil-exchange))
  )
#+END_SRC

References:
1. http://vimcasts.org/episodes/swapping-two-regions-of-text-with-exchange-vim
** Ivy
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :diminish
  :init
  (use-package smex
    ;; smex will sort the result of counsel-M-x
    )

  (use-package historian
    ;; store the results of completing-read and similar functions persistently to provide better completion candidates for recent or frequent used item.
    :config (historian-mode))

  (use-package ivy-historian
    :config (ivy-historian-mode))

  :config
  (use-package counsel
    ;; power ivy with counsel
    :diminish
    :config
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "C-h f") 'counsel-describe-function)
    (global-set-key (kbd "C-h v") 'counsel-describe-variable)

    ;; counsel-search comes with counsel library. It queries the search engine and open the result page in web browser. Use a custom ddg search engine to use the familiar ddg search result page.
    (add-to-list 'counsel-search-engines-alist '(ddgz "https://duckduckgo.com/ac/" "https://duckduckgo.com/?q=" counsel--search-request-data-ddg))
    (setq counsel-search-engine 'ddgz)

    ;; I want counsel-search to behave more like the browser omnibar which open the url directly when it is prefixed with http(s)://
    (defun jh/counsel-search-action (x)
      "Browse URL if x is an URL. If not, consult search engine on x."
      (if (string-prefix-p "http" x)
          (browse-url x)
        (browse-url
         (concat
          (nth 2 (assoc counsel-search-engine counsel-search-engines-alist))
          x))))
    (defun jh/counsel-search ()
      "Ivy interface for dynamically querying a search engine."
      (interactive)
      (require 'request)
      (require 'json)
      (ivy-read "search: " #'counsel-search-function
                :action #'jh/counsel-search-action
                :dynamic-collection t
                :caller 'counsel-search)))

  (ivy-mode)
  (setq ivy-use-virtual-buffers t) ;; includes recentf and bookmarks
  (setq enable-recursive-minibuffers t)
  (setq ivy-count-format "")
  (setq ivy-virtual-abbreviate 'fullpath)
  (setq ivy-initial-inputs-alist '((Man-completion-table . "^") ;; or (man. "^")?
                                   (woman . "^")))

  ;; IDO-style directory navigation
  (define-key ivy-minibuffer-map (kbd "RET") #'ivy-alt-done)
  (define-key ivy-minibuffer-map (kbd "C-j") #'ivy-immediate-done)
  (define-key ivy-minibuffer-map (kbd "C-RET") #'ivy-immediate-done)

  ;; Open file in dired from ivy-switch-buffer
  (defun open-file-directory-from-path (x)
    "Open the directory given a file path"
    (find-file (file-name-directory x)))

  ;; Add dispatch options jumping to the file/buffer directory.
  (ivy-set-actions 'counsel-file-jump '(("d" open-file-directory-from-path "directory")))
  (ivy-set-actions 'ivy-switch-buffer '(("d" open-file-directory-from-path "directory"))))
#+END_SRC

References:
1. https://emacs.stackexchange.com/questions/38841/counsel-m-x-always-shows
2. https://github.com/purcell/emacs.d/blob/master/lisp/init-ivy.el
* Performance
#+BEGIN_SRC emacs-lisp
;; Performance
(use-package gcmh
  :diminish gcmh-mode
  :config (gcmh-mode))
#+END_SRC
* Assistance
#+BEGIN_SRC emacs-lisp
(use-package fullframe
  ;; open buffer into "full-screen" mode until quit it
  )

(use-package recentf
  ;; track recent files
  :ensure nil
  :hook (after-init . recentf-mode)
  :config
  (setq-default recentf-max-menu-items 1000
                recentf-max-saved-items nil ;; save the entire list
                recentf-exclude '("/tmp/" "/ssh:")))


(use-package files
  :ensure nil
  :config
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups"))
        backup-by-copying t       ; Don't delink hardlinks
        version-control t         ; Use version numbers on backups
        delete-old-versions t     ; Automatically delete excess backups
        kept-new-versions 20      ; Number of newest versions to keep
        kept-old-versions 5       ; Number of the old versions to keep
        vc-make-backup-files t))  ; Make backups file even from a version controlled dir

(use-package uniquify
  ;; resolve buffer name conflicts
  :ensure nil
  :config
  (setq uniquify-buffer-name-style 'reverse
        uniquify-separator " ‚Ä¢ "
        uniquify-after-kill-buffer-p t
        uniquify-ignore-buffers-re "^\\*"))

(use-package mode-line-bell
  :init (setq ring-bell-function 'ignore)
  :hook (after-init . mode-line-bell-mode))
#+END_SRC
* Temp
#+BEGIN_SRC emacs-lisp
(defun jh/get-all-subdirs (PATH DEPTH)
  "Get all subdirectories under the directory PATH. Does not include the directory itself in the result."
  (delete (expand-file-name PATH)
          (split-string (shell-command-to-string (concat "find " PATH " -type d" " -maxdepth " (number-to-string DEPTH))) "\n" t)))

(defconst jh/emacs-directory (concat (getenv "HOME") "/.emacs.d/"))
(defun jh/emacs-subdirectory (filepath)
  "Locate a file with FILEPATH in my emacs's directory."
  (expand-file-name filepath jh/emacs-directory))

(defun require-package (package)
  "Require a PACKAGE. Install PACKAGE if not already installed. PACKAGE will be required immediately after installation."
  (if (package-installed-p package)
	  (require package)
    (unless package-archive-contents
	  (package-refresh-contents))
    (package-install package)
    (require package)))
#+END_SRC
* Beautification
#+BEGIN_SRC emacs-lisp
(dolist (subdir (jh/get-all-subdirs (concat user-emacs-directory "themes") 1))
  (add-to-list 'custom-theme-load-path subdir))
(load-theme 'dracula t) ; use theme leuven for day theme

;; Use Overpass Mono as the default font
(add-to-list 'default-frame-alist '(font . "Overpass Mono"))

(use-package diminish
  ;; hide or redefine mode indicator at the mode line
  )

(use-package page-break-lines
  ;; display ^L as a horizontal line. Useful for separating section in helps or codes.
  :diminish page-break-lines-mode
  :config (global-page-break-lines-mode))

(blink-cursor-mode -1)

(defun jh/toggle-reading-face-mode ()
  "Define a reading \"mode\", e.g. Info."
  (interactive)
  (buffer-face-set '(:family "Montserrat")))

(defun jh/centre-align-buffer-content ()
  "Centralise buffer content by setting the fringe."
  (interactive)
  (let ((full-width (window-width))
        (target-width (* .60 (window-width))))
    (set-fringe-style (round (- full-width target-width)))
    (set-face-attribute 'fringe nil :background nil)))

;; What is this for??
(with-eval-after-load 'diminish
  (with-eval-after-load 'face-remap
    (diminish 'buffer-face-mode)))
#+END_SRC

Beautiful Emacs themes:
1. https://github.com/mauforonda/emacs/blob/master/personal-theme.org

Font name can be expressed using the Fontconfig pattern (see: [[info:emacs#Fonts][info:emacs#Fonts]]): fontname[-fontsize][:name1=value1][:name2=value2]... where nameN can be one of 'slant', 'weight', 'style', width', and 'spacing.
* IDE Framework
An IDE is a complex piece of software. Emacs is the best Lisp editor and I want it to be the best editor completing with features to rival the best IDE in the market. Here I define the framework to declare the framework of a programming language. Components of an IDE:
1. console, shell
2. run project, run file
3. debug, variable explorer
4. file explorer, module explorer (like IntelliJ Idea)
   Module explorer is better than a file explorer
5. code completion
6. error linter
7. jump to definition/declaration
8. static code analysis
9. start project, search project file
   Project as a unit
10. version control
11. read docs
12. code refactoring

* Lisp Mode
Lisp mode deals a lot with parens.
#+BEGIN_SRC emacs-lisp
(defun jh/enable-check-parens-on-save ()
  "Run `check-parens' when the current buffer is saved."
  (add-hook 'after-save-hook #'check-parens nil t))

(defun jh/evil-args-switch-to-lisp-mode ()
  "Adapt evil-args to lisp-mode"
  (setq evil-args-delimiters '(" ")))

(defvar jh/lispy-modes-hook
  '(jh/enable-check-parens-on-save
    jh/evil-args-switch-to-lisp-mode
    enable-paredit-mode
    prism-mode
    aggressive-indent-mode)
  "Define all hooks to run in all Lisp modes.")

(defconst jh/lispy-modes
  '(lisp-mode lisp-interaction-mode inferior-lisp-mode
              emacs-lisp-mode common-lisp-mode geiser-mode)
  "All lisp modes.")

(defun jh/lisp-setup()
  "Enable features useful in all Lisp modes."
  (run-hooks 'jh/lispy-modes-hook))

(require 'derived)
(dolist (hook (mapcar #'derived-mode-hook-name jh/lispy-modes))
  (add-hook hook 'jh/lisp-setup))

(use-package prism
  ;; Colour code expressions according to their depth level
  )

(use-package elisp-lint
  ;; Basic linting for Emacs-Lisp.
  ;; See: flycheck-package, package-lint
  )

(use-package ipretty
  ;; Pretty print the result of an elisp expression
  :hook (emacs-lisp-mode . ipretty-mode))

(use-package elec-pair
  :ensure nil
  :hook ((prog-mode text-mode) . electric-pair-mode)
  :config (setq electric-pair-preserve-balance t))

(use-package paren
  :ensure nil
  :hook ((prog-mode text-mode) . show-paren-mode)
  :config
  (setq show-paren-delay 0)
  (show-paren-mode)) ; activate globally to highlight matching parenthesis

(use-package paredit
  ;; enable AST transformation/editing
  :diminish (paredit . " Par"))

(use-package highlight-quoted
  ;; highlight Lisp quotes and quoted symbols
  :hook (emacs-lisp-mode . highlight-quoted-mode))

;;; Common Lisp
(use-package slime
  :config
  (setq inferior-lisp-program "/usr/local/bin/sbcl")

  (use-package slime-company)

  (require 'slime-autoloads)
  (slime-setup '(slime-fancy slime-company))

  (setq slime-enable-evaluate-in-emacs t)) ; for swank::eval-in-emacs
#+END_SRC

References:
1. https://emacs.stackexchange.com/q/28857 and https://stackoverflow.com/q/27142996
   elec-pair
2. https://stackoverflow.com/a/2692474
3. https://github.com/slime/slime
4. https://github.com/anwyn/slime-company
* Python Mode
I think Spyder is a good Python IDE. It has built-in pdb mechanism, variable explorer, and IPython console.

Use cases:
1. Easily find files and switch between projects.
2. Easy navigation through function definitons.
3. Contextual documentation.
4. Inline help for complex function calls.

#+BEGIN_SRC emacs-lisp
(use-package python
  :ensure nil
  :mode ("\\.py\\'" . python-mode)
  :interpreter ("python" . python-mode)
  :config
  ;; On Ubuntu, use python3
  (setq python-shell-interpreter "python3")
  (setq org-babel-python-command "python3")
  (setq gud-pdb-command-name "python -m pdb")) ; python debugger program

(use-package pyenv-mode
  ;; Integrate pyenv with Python-mode
  :ensure-system-package pyenv
  :config
  (pyenv-mode))

(use-package anaconda-mode
  :hook ((python-mode . anaconda-mode)
         (python-mode . anaconda-eldoc-mode))
  :config
  (use-package company-anaconda
    :after company
    :config
    (add-to-list 'company-backends 'company-anaconda)))

(use-package ein
  ;; Working with jupyter notebook
  :config
  (evil-initial-state 'ein:notebooklist 'emacs))

(use-package pip-requirements)
#+END_SRC

References:
1. https://www.emacswiki.org/emacs/PythonProgrammingInEmacs
2. https://thoughtbot.com/blog/emacs-as-a-python-ide
* Graphviz-Dot Mode
#+BEGIN_SRC emacs-lisp
(use-package graphviz-dot-mode
  ;; A major mode for editing Graphviz .dot file
  :config
  (setq graphviz-dot-indent-width 4)

  (use-package company-graphviz-dot
    ;; Company completion function for graphviz-dot-mode
    )
  )
#+END_SRC
* PlantUML Mode
#+BEGIN_SRC emacs-lisp
(use-package plantuml-mode
  ;; A major mode for editing PlantUML sources
  :init
  (with-eval-after-load 'ob-plantuml
    (let ((jar-name "plantuml.jar")
          (url "http://jaist.dl.sourceforge.net/project/plantuml/plantuml.jar"))
      (setq org-plantuml-jar-path (expand-file-name "plantuml.jar" user-emacs-directory))
      (unless (file-exists-p org-plantuml-jar-path)
        (url-copy-file url org-plantuml-jar-path))))
  )
#+END_SRC
* File Editing
#+BEGIN_SRC emacs-lisp
;; go to the next/previous file (by name). use prefix c-u to go back.
;; https://emacs.stackexchange.com/a/12164
(defun jh/goto-next-file (&optional backward)
  "Find the next file (by name) in the current directory.
     With prefix arg, find the previous file."
  (interactive "P")
  (when buffer-file-name
    (let* ((file (expand-file-name buffer-file-name))
           (files (cl-remove-if (lambda (file) (cl-first (file-attributes file)))
                                (sort (directory-files (file-name-directory file) t nil t) 'string<)))
           (pos (mod (+ (cl-position file files :test 'equal) (if backward -1 1))
                     (length files))))
      (find-file (nth pos files)))))

(defun jh/goto-previous-file ()
  (interactive)
  (goto-next-file t))

;; using tramp to sudo edit the current file
;; SOURCE: https://stackoverflow.com/a/33280376
(defun jh/sudo-edit-this-file-buffer ()
  "Edit the current file with superuser privilege."
  (interactive)
  (find-file (concat "/sudo::" buffer-file-name)))

;; Source: https://emacsredux.com/blog/2013/05/04/rename-file-and-buffer/
(defun jh/rename-this-file-buffer ()
  "Rename the current buffer and file it is visiting."
  (interactive)
  (let ((filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
        (message "Buffer is not visiting a file!")
      (let ((new-name (read-file-name "New name: " filename)))
        (cond
         ((vc-backend filename) (vc-rename-file filename new-name))
         (t
          (rename-file filename new-name t)
          (set-visited-file-name new-name t t)))))))

;; Delete the current file from the visiting buffer
(defun jh/delete-this-file-buffer ()
  "Delete the current file, and kill the buffer."
  (interactive)
  (unless (buffer-file-name)
    (error "No file is currently being edited"))
  (when (yes-or-no-p (format "Really delete '%s'?"
                             (file-name-nondirectory buffer-file-name)))
    (delete-file (buffer-file-name))
    (kill-buffer)))

(use-package dired
  :ensure nil
  :init
  (setq delete-by-moving-to-trash t) ; unlike shell rm cmd
  :config
  (setq dired-dwim-target t) ; set the default dired target to an adjacent dired buffer location.
  (setq dired-listing-switches "-alh --group-directories-first")
  (setq delete-by-moving-to-trash t)
  (define-key dired-mode-map (kbd "C-c C-q") 'wdired-change-to-wdired-mode))

(use-package openwith
  :hook (dired-mode . openwith-mode)
  :config
  (setq openwith-confirm-invocation nil)
  (setq openwith-associations '(("\\.docx\\'" "xdg-open" (file))
                                ("\\.mp3\\'" "mpv" ("--no-video" file)))))
#+END_SRC

References:
1. https://web.archive.org/web/20141020081338/http://truongtx.me:80/2013/04/25/dired-as-default-file-manager-5-customize-ls-command/
   Dired listing switches
* File Reading
#+BEGIN_SRC emacs-lisp
(use-package info
  :ensure nil
  :mode ("\\.info\\'" . Info-on-current-buffer)
  :init
  ;; add default Info-directory-list to the end of Info-directory-list in case $INFOPATH is set by program like GNU Guix
  (dolist (dir Info-default-directory-list)
    (unless (member dir Info-directory-list)
      (setq Info-directory-list (append Info-directory-list (list dir)))))
  :config
  ;; add an info directory to load additional .info files
  (add-to-list 'Info-directory-list "~/Info_Files_Manual"))

(use-package pdf-tools
  :ensure-system-package (imagemagick pdftk)
  :mode ("\\.[pP][dD][fF]\\'" . pdf-view-mode)
  :config
  (pdf-tools-install)

  ;; Performance
  (setq pdf-cache-image-limit 15)
  ;; (setq pdf-cache-prefetch-delay X)
  (setq image-cache-eviction-delay 15)

  (define-key pdf-view-mode-map (kbd "j") #'pdf-view-next-line-or-next-page)
  (define-key pdf-view-mode-map (kbd "k") #'pdf-view-previous-line-or-previous-page)
  (define-key pdf-view-mode-map (kbd "h") #'image-backward-hscroll)
  (define-key pdf-view-mode-map (kbd "l") #'image-forward-hscroll)
  (define-key pdf-view-mode-map (kbd "C-f") #'pdf-view-scroll-up-or-next-page)
  (define-key pdf-view-mode-map (kbd "C-b") #'pdf-view-scroll-down-or-previous-page)

  (defun pdf-view--rotate (&optional counterclockwise-p page-p)
    "Rotate PDF 90 degrees.  Requires pdftk to work.\n
Clockwise rotation is the default; set COUNTERCLOCKWISE-P to
non-nil for the other direction.  Rotate the whole document by
default; set PAGE-P to non-nil to rotate only the current page.
\nWARNING: overwrites the original file, so be careful!"
    ;; error out when pdftk is not installed
    (if (null (executable-find "pdftk"))
        (error "Rotation requires pdftk")
      ;; only rotate in pdf-view-mode
      (when (eq major-mode 'pdf-view-mode)
        (let* ((rotate (if counterclockwise-p "left" "right"))
               (file   (format "\"%s\"" (pdf-view-buffer-file-name)))
               (page   (pdf-view-current-page))
               (pages  (cond ((not page-p) ; whole doc?
                              (format "1-end%s" rotate))
                             ((= page 1) ; first page?
                              (format "%d%s %d-end"
                                      page rotate (1+ page)))
                             ((= page (pdf-info-number-of-pages)) ; last page?
                              (format "1-%d %d%s"
                                      (1- page) page rotate))
                             (t         ; interior page?
                              (format "1-%d %d%s %d-end"
                                      (1- page) page rotate (1+ page))))))
          ;; empty string if it worked
          (if (string= "" (shell-command-to-string
                           (format (concat "pdftk %s cat %s "
                                           "output %s.NEW "
                                           "&& mv %s.NEW %s")
                                   file pages file file file)))
              (pdf-view-revert-buffer nil t)
            (error "Rotation error!"))))))

  (defun pdf-view-rotate-clockwise (&optional arg)
    "Rotate PDF page 90 degrees clockwise.  With prefix ARG, rotate
entire document."
    (interactive "P")
    (pdf-view--rotate nil (not arg)))

  (defun pdf-view-rotate-counterclockwise (&optional arg)
    "Rotate PDF page 90 degrees counterclockwise.  With prefix ARG,
rotate entire document."
    (interactive "P")
    (pdf-view--rotate :counterclockwise (not arg)))
  )
#+END_SRC

References:
1. https://stackoverflow.com/a/14230685 & https://www.whitman.edu/mathematics/emacs_doc/emacs_447.html
   pdf vim-like control
2. https://emacs.stackexchange.com/a/24766
   rotate pdf.
* General File Editing Ergonomics
#+BEGIN_SRC emacs-lisp
(defun jh/align-whitespace (start end)
  "Align columns by whitespace. E.g.
    >> the quick brown fox
    >> jumped over the lazy
    >> dogs the quick brown
to
    >> the     quick  brown  fox
    >> jumped  over   the    lazy
    >> dogs    the    quick  brown "
  (interactive "r")
  (align-regexp start end "\\(\\s-*\\)\\s-" 1 0 t))

(use-package yasnippet
  ;; a templating tool
  :diminish (yas-minor-mode . " ‚ìé")
  :hook ((text-mode prog-mode) . yas-minor-mode)
  :config
  (yas-reload-all))

(use-package writeroom-mode
  ;; distraction-free writing mode. Possibly useful for reading as well
  :config
  (setq writeroom-width 0.6))

(use-package browse-kill-ring
  ;; browse previously deleted or copied items
  :commands browse-kill-ring)

(use-package autorevert
  ;; auto refresh buffers when the file is changed on the disk
  :ensure nil
  :diminish auto-revert-mode
  :config
  (setq auto-revert-remote-files t)
  (setq auto-revert-avoid-polling t))
#+END_SRC

References:
1. http://pragmaticemacs.com/emacs/aligning-text/
   Whitespace alignment
* Code Writing Ergonomics
#+BEGIN_SRC emacs-lisp
;; Custom font for programming buffer
(defun jh/toggle-coding-face-mode ()
  "Sets a fixed width (monospace) font in current buffer"
  (interactive)
  (buffer-face-set '(:family "IBM Plex Mono")))
(add-hook 'prog-mode-hook 'jh/toggle-coding-face-mode)

;; Prettify symbol, i.e. replace keywords with symbol. E.g. lambda -> Œª
(add-hook 'prog-mode-hook #'prettify-symbols-mode)

(use-package smart-jump
  :config
  (smart-jump-setup-default-registers)
  (define-key evil-normal-state-map (kbd "g d") 'smart-jump-go)

  ;; smart-jump opens xref when there are more than one candidate.
  (evil-set-initial-state 'xref--xref-buffer-mode 'emacs))

(use-package company
  ;; defines a framework to complete anything
  :diminish " ¬©"
  :hook ((text-mode prog-mode) . company-mode)
  :config
  (setq tab-always-indent 'complete)
  (setq company-require-match 'never) ; force out of selection by typing non-match characters
  (setq company-dabbrev-downcase nil) ; disable the downcase that company does to the variables
  (setq company-idle-delay 0) ; display company autocomplete immediately
  (setq company-show-numbers t) ; use M-1, M-2 to select candidates
  (define-key company-mode-map [remap indent-for-tab-command] 'company-indent-or-complete-common) ; use <TAB> to indent to popup company completion
  (define-key company-active-map (kbd "\C-n") #'company-select-next)
  (define-key company-active-map (kbd "\C-p") #'company-select-previous)
  (define-key company-active-map (kbd "\C-d") #'company-show-doc-buffer)
  (define-key company-active-map (kbd "M-.") #'company-show-location)

  (use-package company-quickhelp
    :hook (company-mode . company-quickhelp-mode)))

(use-package display-line-numbers
  :ensure nil
  :config
  (defun jh/display-visual-line-numbers ()
    "Display line numbers interactively."
    (interactive)
    (display-line-numbers-mode 1)
    (setq display-line-numbers 'visual
          display-line-numbers-width 4
          display-line-numbers-width t))
  (add-hook 'prog-mode-hook #'jh/display-visual-line-numbers)
  (add-hook 'text-mode-hook #'jh/display-visual-line-numbers)

  (setq display-line-numbers-type 'visual)

  ;; prettify line-number faces
  (set-face-attribute 'line-number nil
                      :font "Hack"
                      :height 80)

  (set-face-attribute 'line-number-current-line nil
                      :font "Hack"
                      :height 80
                      :background "#ffdfaa"
                      :foreground "#3a3a3a"))

(use-package magit
  ;; a Git interface
  :ensure-system-package (git diff)
  :config
  (with-eval-after-load 'fullframe
    (fullframe magit-status magit-mode-quit-window))

  (use-package forge
    ;; work with Git forges, such as Github and Gitlab, from the comfort of Magit and the rest of Emacs.
    ))

(use-package whitespace-cleanup-mode
  :diminish whitespace-cleanup-mode
  :config
  (setq-default show-trailing-whitespace t)
  (global-whitespace-cleanup-mode)
  (setq whitespace-action '(auto-cleanup)))

(use-package undo-tree
  ;; advance undo & redo
  :diminish undo-tree-mode
  :config
  (global-undo-tree-mode)
  (with-eval-after-load 'evil
    (evil-set-initial-state 'undo-tree-visualize-mode 'emacs)))

(use-package simple
  :ensure nil
  :diminish visual-line-mode
  :config
  (global-visual-line-mode) ;; wrap line
  (column-number-mode)) ;; display column number in the mode line

(use-package subword
  ;; treat CamelCase word as two words, such that "dw" in Evil mode only deletes the word 'Camel'
  :ensure nil
  :diminish subword-mode
  :config (global-subword-mode))

(use-package aggressive-indent
  ;; keep my codes always indent
  ;; :replace electric-indent-mode
  :diminish aggressive-indent-mode)

(use-package highlight-numbers
  :hook (prog-mode . highlight-numbers-mode))

(use-package highlight-operators
  :hook (prog-mode . highlight-operators-mode))

(use-package symbol-overlay
  ;; highlight symbols
  ;; :replace highlight-symbol package
  :diminish symbol-overlay-mode
  :hook ((prog-mode html-mode yaml-mode conf-mode) . symbol-overlay-mode))

(use-package highlight-escape-sequences
  :hook (prog-mode . hes-mode))

(use-package highlight-indent-guides
  :diminish
  :hook (prog-mode . highlight-indent-guides-mode)
  :config
  (setq highlight-indent-guides-method 'character)
  (setq highlight-indent-guides-responsive 'top)
  (setq highlight-indent-guides-delay 0))

;; no tabs. See: https://www.emacswiki.org/emacs/NoTabs
(setq-default indent-tabs-mode nil
              tab-width 4)

(use-package flymake
  ;; rewritten in Emacs 26.1
  ;; :replace flycheck
  :ensure nil
  :config
  (with-eval-after-load 'evil
    (evil-set-initial-state 'flymake-diagnostics-buffer-mode 'emacs))

  (use-package flymake-quickdef)

  ;; Echo error under cursor in minibuffer
  (use-package flymake-cursor
    :load-path "lisp/flymake-cursor"
    :hook (flymake-mode . flymake-cursor-mode)))

(use-package hl-line
  ;; Highlight current line.
  :ensure nil
  :hook (prog-mode . hl-line-mode))

(use-package display-fill-column-indicator
  ;; highlight column at position 80
  :if (version<= "27.0" emacs-version)
  :hook (prog-mode . display-fill-column-indicator-mode)
  :config
  (setq display-fill-column-indicator-column 80)
  (setq display-fill-column-indicator-character '‚îÇ))

(use-package debug
  :ensure nil
  :config
  (setq debugger-bury-or-kill 'kill)) ;; kill debugger windows on exit
#+END_SRC

References:
1. https://www.reddit.com/r/emacs/comments/6noyxa/customizing_the_new_native_line_numbers_in_emacs
   Prettify line-number faces.
2. https://github.com/company-mode/company-mode
3. https://emacs.stackexchange.com/a/23937
4. https://github.com/company-mode/company-mode/wiki/Switching-from-AC
5. https://github.com/company-mode/company-mode/issues/526
   YouCompleteMe-style tab completion.
6. https://github.com/company-mode/company-mode/issues/94
   Integrate company with 'ident-for-tab-command'.
7. https://www.emacswiki.org/emacs/FacesPerBuffer
   Custom font for prog-mode.
* Docs Reference Ergonomics
#+BEGIN_SRC emacs-lisp
(use-package help
  :ensure nil
  :config
  (with-eval-after-load 'evil
    (evil-set-initial-state 'help-mode 'emacs))

  (define-key help-mode-map (kbd "f") #'scroll-up-command)
  (define-key help-mode-map (kbd "b") #'scroll-down-command))

(use-package help-fns+
  ;; a mode for describing keymap
  :load-path "lisp/help-plus")

(use-package man
  :ensure nil
  :config
  (with-eval-after-load 'evil
    (evil-set-initial-state 'Man-mode 'emacs))
  
  (define-key Man-mode-map (kbd "f") #'scroll-up-command)
  (define-key Man-mode-map (kbd "b") #'scroll-down-command))

(use-package counsel-dash
  ;; browse dash in Emacs using ivy completion framework
  :load-path "lisp/counsel-dash"
  :config
  (setq dash-docs-docsets-path (expand-file-name "docsets" user-emacs-directory)) ;; use absolute path
  (setq dash-docs-common-docsets '("opencv" "keras" "python3" "java" "numpy" "ansible" "pytorch" "terraform" "matplotlib"))

  ;; change the default doc browser to using eww
  (setq dash-docs-browser-func 'eww))
#+END_SRC
* Emacs Ergonomics
#+BEGIN_SRC emacs-lisp
(use-package ibuffer
  :ensure nil
  :config
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (fullframe ibuffer ibuffer-quit)

  ;; Use human readable Size column instead of original one
  (define-ibuffer-column size-h
    (:name "Size" :inline t)
    (file-size-human-readable (buffer-size)))

  ;; Modify the default ibuffer-formats (toggle with `)
  (setq ibuffer-formats
        '((mark modified read-only vc-status-mini " "
                (name 22 22 :left :elide)
                " "
                (size-h 9 -1 :right)
                " "
                (mode 12 12 :left :elide)
                " "
                vc-relative-file)
          (mark modified read-only vc-status-mini " "
                (name 22 22 :left :elide)
                " "
                (size-h 9 -1 :right)
                " "
                (mode 14 14 :left :elide)
                " "
                (vc-status 12 12 :left)
                " "
                vc-relative-file)))

  (setq ibuffer-filter-group-name-face 'font-lock-doc-face)

  (use-package ibuffer-vc
    ;; Group buffers by vc root directory
    :config
    (defun ibuffer-set-up-preferred-filters ()
      (ibuffer-vc-set-filter-groups-by-vc-root)
      (unless (eq ibuffer-sorting-mode 'filename/process)
        (ibuffer-do-sort-by-filename/process)))

    (add-hook 'ibuffer-hook 'ibuffer-set-up-preferred-filters)))

(use-package ace-window
  :config
  (ace-window-display-mode)             ; show keys in the modeline
  (global-set-key [remap other-window] 'ace-window)
  (setq aw-scope 'frame)) ; limits ace-window to the current frame

(use-package auto-package-update
  ;; auto update packages every N days
  :config
  (setq auto-package-update-interval 28) ; update every 28 days
  (setq auto-package-update-prompt-before-update t) ; sometimes it's useful to skip an automatic update
  (setq auto-package-update-hide-results nil) ; show results buffer on finish updating

  (auto-package-update-maybe))

(use-package guide-key
  ;; show key-binding completion suggestions/hints
  ;; :replace which-key (newer)
  :diminish guide-key-mode
  :hook (after-init . guide-key-mode)
  :config
  (setq guide-key/guide-key-sequence t))

(use-package restart-emacs
  ;; a handy tool to restart Emacs, especially when using EXWM
  :commands (restart-emacs))

(use-package mode-line-bell
  ;; alert from the mode-line
  :init (setq ring-bell-function 'ignore)
  :hook (after-init . mode-line-bell-mode))

(use-package list-unicode-display
  ;; provides a command which searches for unicode characters by name, and displays a list of matching characters with their names in a buffer.
  )

;; allow access to emacsclient from terminal
(require 'server)
(unless (server-running-p)
  (server-start))
#+END_SRC

A sample hydra to tie ace-window and other relevant functionalities together.
#+BEGIN_SRC emacs-lisp :tangle no
(defhydra hydra-window-z ()
  "Hydra-window"
  ("h" windmove-left)
  ("j" windmove-down)
  ("k" windmove-up)
  ("l" windmove-right)

  ("H" buf-move-left)
  ("J" buf-move-down)
  ("K" buf-move-up)
  ("L" buf-move-right)

  ("1" ace-window "ace")
  ("s" (lambda () (interactive) (ace-window 4)) "swap")
  ("d" (lambda () (interactive) (ace-window 16)) "delete")

  ("|" (lambda ()
	 (interactive)
	 (split-window-right)
	 (windmove-right)))
  ("-" (lambda ()
	 (interactive)
	 (split-window-below)
	 (windmove-down)))
  ("u" (progn
	 (winner-undo)
	 (setq this-command 'winner-undo)))
  ("f" counsel-find-file)
  ("r" winner-redo)
  ("d" delete-window))

(global-set-key (kbd "<f1>") 'hydra-window-z/body)
#+END_SRC
References:
1. https://oremacs.com/2015/01/29/more-hydra-goodness/
   Combining ace-window and windmove with hydra.
* Emacs Interface to External Programs
#+BEGIN_SRC emacs-lisp
(use-package emms
  :config
  (emms-all)
  (emms-default-players)
  (setq emms-source-file-default-directory "~/Music/"))

(use-package pocket-reader
  ;; interface to pocker-reader
  ;; the functionalities that I care:
  ;; 1. mark as read/unread.
  ;; 2. search.
  ;; 3. open in external browser.
  :commands (pocket-reader jh/pocket-reader-add-link)
  :bind (:map pocket-reader-mode-map
              ([remap pocket-reader-open-url] . #'pocket-reader-open-in-external-browser)
              ("r" . pocket-reader-toggle-read-unread)
              ("g" . pocket-reader-refresh)
              ("y" . pocket-reader-copy-url))
  :config
  (defalias 'pocket-reader-toggle-read-unread 'pocket-reader-toggle-archived)
  (fullframe pocket-reader quit-window)
  (evil-set-initial-state 'pocket-reader-mode 'emacs)

  (defun jh/pocket-reader-add-link ()
    "Add URL from user input to Pocket. 
TODO: Default to the first entry in kill-ring."
    (interactive)
    (let ((url (read-string "URL: ")))
      (when (pocket-lib-add-urls url)
        (message "Added: %s" url)))))

(use-package counsel-firefox-bookmarks
  :load-path "lisp/counsel-firefox-bookmarks"
  :config
  (setq counsel-firefox-bookmarks-file (expand-file-name "firefox-bookmarks-autobackup.html" jh/sync-directory))

  (defun incognito-tab (x)
    "Browse candidate in Firefox private window."
    (browse-url (cadr x)))

  (ivy-set-actions 'counsel-firefox-bookmarks '(("i" incognito-tab "incognito-tab"))))

(use-package ecloud
  ;; magit-like porcelain for accessing gcp, azure and aws 
  ;; note: still in infancy
  :load-path "lisp/ecloud"
  :disabled)

(use-package podman
  :load-path "lisp/podman.el"
  :config
  (with-eval-after-load 'podman
    (evil-set-initial-state 'podman-container-mode 'emacs)))

(use-package docker
  :disabled ; not using it for now
  :load-path "lisp/docker.el"
  :bind (:map docker-container-mode-map
              ("RET" . docker-container-help-popup))
  :config
  (with-eval-after-load 'evil
    (evil-set-initial-state 'docker-container-mode 'emacs)
    (evil-set-initial-state 'docker-network-mode 'emacs)
    (evil-set-initial-state 'docker-image-mode 'emacs))

  (setq docker-command "podman")
  (setq docker-run-as-root nil)

  (with-eval-after-load 'fullframe
    (fullframe docker-images tablist-quit)
    (fullframe docker-machines tablist-quit)
    (fullframe docker-volumes tablist-quit)
    (fullframe docker-networks tablist-quit)
    (fullframe docker-containers tablist-quit))

  (use-package dockerfile-mode
    :mode "Dockerfile\\'")

  (use-package docker-compose-mode))
#+END_SRC

References:
1. https://github.com/tangxinfa/counsel-firefox-bookmarks
2. https://www.emacswiki.org/emacs/BrowseUrl#toc29
   With private-browsing.
3. https://github.com/Silex/docker.el/pull/73 && https://github.com/Silex/docker.el/issues/76
   Docker package to Podman.
* Zacque's Utility Function
Here are utility functions that I wrote. I'm putting it here to load it at the beginning.
#+BEGIN_SRC emacs-lisp
(defun jh/get-all-subdirs (PATH DEPTH)
  "Get all subdirectories under the directory PATH. Does not include the directory itself in the result."
  (delete (expand-file-name PATH)
          (split-string (shell-command-to-string (concat "find " PATH " -type d" " -maxdepth " (number-to-string DEPTH))) "\n" t)))

(defun jh/get-dir-and-subdirs (PATH DEPTH)
  "Get all subdirectories under the directory PATH."
  (split-string
   (shell-command-to-string
    (concat "find " PATH " -type d" " -maxdepth " (number-to-string DEPTH))) "\n" t))

;; A helper function
;; Source: https://stackoverflow.com/a/17165074
(defun jh/get-dir-files-and-subdirs (directory &optional full match nosort)
  "Retrieve the list of files and sub-directory in the DIRECTORY. Does not recurse into sub-directories. Like `directory-files' or ls command, but excluding \".\" and \"..\"."
  (let* ((files (directory-files directory full match nosort))
         (result files))
    (if full
        (progn
          (setq result (delete (concat directory "/.") result))
          (setq result (delete (concat directory "/..") result))
          result)
      (delete "." (delete ".." result)))))

(defun jh/file-in-sync-directory (&rest SEQUENCES)
  "Return full path to FILE in the sync-directory as defined by jh/sync-directory. Extra arguments are concatenated to the path. E.g. (jh/file-in-sync-directory SUB-DIR \"file.org\") returns path to jh/sync-directory+SUB-DIR+file.org."
  (mapconcat 'identity (push jh/sync-directory SEQUENCES) "/"))
#+END_SRC
* Utility Third Library
** Wgrep
#+BEGIN_SRC emacs-lisp
(use-package wgrep)
#+END_SRC
** Ripgrep
There are many great Emacs packages that interface to =rg= tool. ~counsel~ provides the =counsel-rg= command which provides live search results. ~rg.el~ builts on ~compilation-mode~ and offers =rg-group-result= to combine results (=rg-dwim= is excellent). It interoperates well with =wgrep=. ~ripgrep.el~ searches starting in the project root (it offers =projectile-ripgrep=). ~socyl~ is a generic text search tool that supports =rg= plus others. ~deadgrep~ might be the best of all?
#+BEGIN_SRC emacs-lisp
(use-package rg
  :ensure-system-package rg
  :config
  (with-eval-after-load 'evil
    (evil-set-initial-state 'rg-mode 'emacs)))

;; for integration with projectile.
(use-package ripgrep
  :ensure-system-package rg
  :config
  (with-eval-after-load 'evil
    (evil-set-initial-state 'ripgrep-search-mode 'emacs)))

(with-eval-after-load 'counsel
  ; use -i for case insensitive
  (setq counsel-rg-base-command "rg -i --no-heading --line-number --color never %s"))
#+END_SRC

References:
1. https://oremacs.com/2018/03/05/grep-exclude/
   For counsel-rg-base-command idea.
2. https://github.com/dajva/rg.el
* Keeping Secrets in Emacs with GnuPG, Auth Sources and Pass
~auth-source~ library is a way for Emacs to answer the old burning question: "what are my username and password?". Password-store (or simply =pass=) is a standard Unix password manager following the Unix philosophy. ~auth-source-pass~ integrates Emacs' auth-source library with password-store. It has been included in Emacs since version 26.
#+BEGIN_SRC emacs-lisp
(use-package auth-source-pass
  :ensure nil
  :config (auth-source-pass-enable))
#+END_SRC

Emacs offers to save my passwords when I want to use TRAMP. However, I would like to save it in an encrypted file. Create the file =~/.emacs.d/.authinfo.gpg= and give only the current user permission to read-write to it. The following shell commands will do:
#+BEGIN_SRC shell
touch ~/.emacs.d/.authinfo.gpg
chmod 600 ~/.emacs.d/.authinfo.gpg
#+END_SRC
Then configure Emacs accordingly.
#+BEGIN_SRC emacs-lisp
(setq package-gnupghome-dir "~/.gnupg") ; set it for ELPA public key
(setq auth-sources '((:source "~/.emacs.d/.authinfo.gpg"))) ; file to save my credentials
#+END_SRC

Set it to use =gpg= explicitly (it is the default). In some case, I might want to use =gpg2=.
#+BEGIN_SRC emacs-lisp
(setq epg-gpg-program "gpg2") ; set it explicitly
(setq epg-pinentry-mode 'loopback) ; use Emacs for password prompt instead of other pinentry apps
(setq auth-source-debug t) ; echo helpful information to *Messages* buffer.
#+END_SRC

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'evil
  (evil-set-initial-state 'epa-key-mode 'emacs)
  (evil-set-initial-state 'epa-key-list-mode 'emacs))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package ivy-pass
  :load-path "lisp/ivy-pass")
#+END_SRC

References:
1. https://www.masteringemacs.org/article/keeping-secrets-in-emacs-gnupg-auth-sources
2. https://emacs.stackexchange.com/a/32554
   epg-pinentry-mode
* Personal Info
** Name and Email
Add my personal info.
#+BEGIN_SRC emacs-lisp
(setq user-full-name (password-store-get-field "personal-info" "fullname"))
(setq user-mail-address (password-store-get-field "personal-info" "personal-hotmail"))
#+END_SRC
** Emacs-memento-mori
A reminder of mortality. Deep dive into the reflection of life.
#+BEGIN_SRC emacs-lisp
(use-package memento-mori
  :config
  (setq memento-mori-birth-date (password-store-get-field "personal-info" "birthday"))
  (memento-mori-mode))
#+END_SRC

References:
1. http://manuel-uberti.github.io//emacs/2019/07/06/memento-mori/
   Where I read about it.
* Personalise & Aesthetic
** All-the-icons
#+BEGIN_SRC emacs-lisp
(require-package 'all-the-icons)
#+END_SRC

Remember to run (all-the-icons-install-fonts) to install the Resource Fonts. Bear in mind, this will run =fc-cache -f -v= which can take some time to complete.

References:
1. github:domtronn/all-the-iocns.el
** UTF-8 Everywhere
Setup to have UTF-8 everywhere? To display Chinese fonts in TTY.
#+BEGIN_SRC emacs-lisp
(defun sanityinc/utf8-locale-p (v)
  "Return whether locale string V relates to a UTF-8 locale."
  (and v (string-match "UTF-8" v)))

(defun sanityinc/locale-is-utf8-p ()
  "Return t iff the \"locale\" command or environment variables prefer UTF-8."
  (or (sanityinc/utf8-locale-p (and (executable-find "locale") (shell-command-to-string "locale")))
      (sanityinc/utf8-locale-p (getenv "LC_ALL"))
      (sanityinc/utf8-locale-p (getenv "LC_CTYPE"))
      (sanityinc/utf8-locale-p (getenv "LANG"))))

(when (or window-system (sanityinc/locale-is-utf8-p))
  (set-language-environment 'utf-8)
  (setq locale-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-selection-coding-system (if (eq system-type 'windows-nt) 'utf-16-le 'utf-8))
  (prefer-coding-system 'utf-8))
#+END_SRC

Reference: https://github.com/hick/emacs-chinese
#+BEGIN_SRC emacs-lisp
(set-buffer-file-coding-system 'utf-8-unix)
(set-clipboard-coding-system 'utf-8-unix)
(set-file-name-coding-system 'utf-8-unix)
(set-keyboard-coding-system 'utf-8-unix)
(set-next-selection-coding-system 'utf-8-unix)
#+END_SRC
** Calendar Settings
Use the format year/month/day.
#+BEGIN_SRC emacs-lisp
(setq calendar-date-style 'iso)
#+END_SRC
* Org-Mode

#+BEGIN_SRC emacs-lisp
(require 'org)
#+END_SRC

Open txt file in org-mode.
#+BEGIN_SRC emacs-lisp
;; Associate txt file with org-mode
(add-to-list 'auto-mode-alist '("\\.txt\\'" . org-mode))
#+END_SRC

Prevent deleting hidden texts. https://emacs.stackexchange.com/a/2091
#+BEGIN_SRC emacs-lisp
(setq org-catch-invisible-edits 'smart-and-error)
#+END_SRC

Use =org-cliplink= to fetch a page title and format it into an org-link.
#+BEGIN_SRC emacs-lisp
(require-package 'org-cliplink)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c l") 'org-store-link)
#+END_SRC

** Personalisation & Beautification
Beautifying org-mode.

Define new org-heading levels to prevent it from repeating from org-level-1 fontface because org-level-1 fontface is special and is a bit larger.
#+URL: https://emacs.stackexchange.com/a/22126
#+BEGIN_SRC emacs-lisp
(defface org-level-9 ;; originally copied from org-level-8
  (org-compatible-face nil ;; not inheriting from outline-9 because that does not exist
    '((((class color) (min-colors 16) (background light)) (:foreground "RosyBrown"))
      (((class color) (min-colors 16) (background dark)) (:foreground "LightSalmon"))
      (((class color) (min-colors 8)) (:foreground "green"))))
  "Face used for level 9 headlines."
  :group 'org-faces)
(defface org-level-10
  (org-compatible-face nil
    '((((class color) (min-colors 16) (background light)) (:foreground "RosyBrown"))
      (((class color) (min-colors 16) (background dark)) (:foreground "LightSalmon"))
      (((class color) (min-colors 8)) (:foreground "green"))))
  "Face used for level 10 headlines."
  :group 'org-faces)
(defface org-level-11
  (org-compatible-face nil
    '((((class color) (min-colors 16) (background light)) (:foreground "RosyBrown"))
      (((class color) (min-colors 16) (background dark)) (:foreground "LightSalmon"))
      (((class color) (min-colors 8)) (:foreground "green"))))
  "Face used for level 11 headlines."
  :group 'org-faces)
(defface org-level-12
  (org-compatible-face nil
    '((((class color) (min-colors 16) (background light)) (:foreground "RosyBrown"))
      (((class color) (min-colors 16) (background dark)) (:foreground "LightSalmon"))
      (((class color) (min-colors 8)) (:foreground "green"))))
  "Face used for level 12 headlines."
  :group 'org-faces)
(defface org-level-13
  (org-compatible-face nil
    '((((class color) (min-colors 16) (background light)) (:foreground "RosyBrown"))
      (((class color) (min-colors 16) (background dark)) (:foreground "LightSalmon"))
      (((class color) (min-colors 8)) (:foreground "green"))))
  "Face used for level 13 headlines."
  :group 'org-faces)
(defface org-level-14
  (org-compatible-face nil
    '((((class color) (min-colors 16) (background light)) (:foreground "RosyBrown"))
      (((class color) (min-colors 16) (background dark)) (:foreground "LightSalmon"))
      (((class color) (min-colors 8)) (:foreground "green"))))
  "Face used for level 14 headlines."
  :group 'org-faces)
(setq org-level-faces (append org-level-faces (list 'org-level-9 'org-level-10 'org-level-11 'org-level-12 'org-level-13 'org-level-14)))
(setq org-n-level-faces (length org-level-faces))
#+END_SRC

Open an org file by showing all children.
#+BEGIN_SRC emacs-lisp
(setq org-startup-folded 'content)
#+END_SRC

=(diminish 'org-indent-mode)= does not work directly. The call to it must occur after org-indent.el has ben loaded. Reference: https://emacs.stackexchange.com/questions/22531/diminish-org-indent-mode
#+BEGIN_SRC emacs-lisp
(require 'org-indent)
(diminish 'org-indent-mode)
#+END_SRC

Open an org file with hard indentation by default.
#+BEGIN_SRC emacs-lisp
(setq org-startup-indented t)
#+END_SRC

Use Iosevka Font for Org-mode: https://shreyas.ragavan.co/post/951004ce-add0-4e7e-b6e2-2932e0dee429/
#+BEGIN_SRC emacs-lisp
(defun jh/toggle-org-mode-writing-configuration ()
  "Sets a special font for Org-mode writing and more."
  (interactive)
  (buffer-face-set '(:family "IosevkaCC"))
  (setq header-line-format " ")
  (setq line-spacing 0.1)
  (setq left-margin-width 2)
  (setq right-margin-width 2)
  (set-window-buffer nil (current-buffer)))

(add-hook 'org-mode-hook 'jh/toggle-org-mode-writing-configuration)
#+END_SRC

Override Org-mode subscript and superscripts default behaviours for display. Mixing LaTeX with plain text.
#+BEGIN_SRC emacs-lisp
(setq org-use-sub-superscripts "{}")
#+END_SRC

Do not hide the markup symbol such as /, ~, and so on.
#+BEGIN_SRC emacs-lisp
(setq org-hide-emphasis-markers nil)
#+END_SRC

References:
1. http://blog.lujun9972.win/emacs-document/blog/2018/10/22/ricing-up-org-mode/index.html
   Org mode ricing.

** Function Library for Org Hacker
#+BEGIN_SRC emacs-lisp
(use-package om
  :load-path "lisp/om.el")
#+END_SRC
** Org Journal

Use Org-mode for writing journals.
TODO: Filter all headings with tag journal using ivy-read.
#+BEGIN_SRC emacs-lisp
(defun jh/find-or-create-today-datetree (pfx)
  "Find or create today datetree entry under a heading with a tag journal in the current buffer. Call with prefix C-u to input DATE int the format (M D Y)."
  (interactive "p")
  (let ((cal-date))
    (if (eq pfx 1)
        (setq cal-date (calendar-current-date))
      (setq cal-date (read)))
    (counsel-org-goto)
    (org-datetree-find-date-create cal-date 'subtree-at-point)))
#+END_SRC

** Org-Tags

Reduce the distance for better viewing at half-split windows.
#+BEGIN_SRC emacs-lisp
(setq org-tags-column -40)
#+END_SRC

** Org Spelling Checker
:PROPERTIES:
:header-args: :tangle no
:END:
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'flyspell
  (add-hook 'org-mode-hook #'flyspell-mode))
#+END_SRC

** Org Download
Drag and drop images to Emacs org-mode.
References:
1. github:abo-abo/org-download
** Org Common Links
#+BEGIN_SRC emacs-lisp
(use-package org-common-links
  :load-path "lisp/org-common-links")
#+END_SRC
* Org GTD
** Organise My Life Into Org Files
Tasks are separated into logical groupings/projects. For large groupings/projects, separate org files are used to store the tasks. Subdirectories are used for collections of files for multiple projects that belong together.

For non-work related tasks:
| Filename | Description                                |
|----------+--------------------------------------------|
| todo.txt | Personal tasks and things to keep track of |

For org capture notes and tasks:
| Filename   | Description           |
|------------+-----------------------|
| refile.txt | Captured tasks bucket |

For work-related org-files to keep business notes:
| Filename                | Description                      |
|-------------------------+----------------------------------|
| bigdata.txt             | Big Data course notes            |
| datamining.txt          | Data Mining course notes         |
| bigdata_assignment1.txt | Assignment 1 for Big Data course |

By separating tasks into files, I can add/drop org files according to my needs to keep only what is important visible in agenda views.

References:
1. http://doc.norang.ca/org-mode.html
** Definition of Projects, Subprojects, and Stuck Projects
Any task with a subtask using a todo keyword is a project. Projects are 'stuck' if they do not have a subtask with a =NEXT= todo state. Projects can have subprojects and they can also be stuck.
#+BEGIN_SRC emacs-lisp
(defun jh/find-project-task ()
  "Move point to the parent (project) task if any"
  (save-restriction
    (widen)
    (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
      (while (org-up-heading-safe)
        (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
          (setq parent-task (point))))
      (goto-char parent-task)
      parent-task)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun jh/is-project-p ()
  "Any task with a todo keyword subtask"
  (save-restriction
    (widen)
    (let ((has-subtask)
          (subtree-end (save-excursion (org-end-of-subtree t)))
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (forward-line 1)
        (while (and (not has-subtask)
                    (< (point) subtree-end)
                    (re-search-forward "^\*+ " subtree-end t))
          (when (member (org-get-todo-state) org-todo-keywords-1)
            (setq has-subtask t))))
      (and is-a-task has-subtask))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun jh/is-project-subtree-p ()
  "Any task with a todo keyword that is in a project subtree.
Callers of this function already widen the buffer view."
  (let ((task (save-excursion (org-back-to-heading 'invisible-ok)
                              (point))))
    (save-excursion
      (jh/find-project-task)
      (if (equal (point) task)
          nil
        t))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun jh/is-task-p ()
  "Any task with a todo keyword and no subtask"
  (save-restriction
    (widen)
    (let ((has-subtask)
          (subtree-end (save-excursion (org-end-of-subtree t)))
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (forward-line 1)
        (while (and (not has-subtask)
                    (< (point) subtree-end)
                    (re-search-forward "^\*+ " subtree-end t))
          (when (member (org-get-todo-state) org-todo-keywords-1)
            (setq has-subtask t))))
      (and is-a-task (not has-subtask)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun jh/is-subproject-p ()
  "Any task which is a subtask of another project"
  (let ((is-subproject)
        (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
    (save-excursion
      (while (and (not is-subproject) (org-up-heading-safe))
        (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
          (setq is-subproject t))))
    (and is-a-task is-subproject)))
#+END_SRC

References:
1. http://doc.norang.ca/org-mode.html
** Org Agenda Views
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "<f12>") 'org-agenda)
#+END_SRC

Show only today's view. Use the weekly view for weekly review.
#+BEGIN_SRC emacs-lisp
(setq org-agenda-span 'day)
#+END_SRC

Override the default to begin a week on Sunday. Source: https://stackoverflow.com/a/32426234
#+BEGIN_SRC emacs-lisp
(setq org-agenda-start-on-weekday 0)
#+END_SRC

Load all the .txt files into org-agenda.
#+BEGIN_SRC emacs-lisp
(setq org-agenda-file-regexp "\\`[^.].*\\(\\.org\\|\\.txt\\)\\'")
#+END_SRC

Assign "org" as my project directory, so that every project in the directory will be automatically added to org-agenda. This frees me from minute configuring every time I change my project working on.
#+BEGIN_SRC emacs-lisp
;; Need a function to return all the subdirectories + the directory itself 
(setq org-agenda-files (jh/get-dir-and-subdirs (jh/file-in-sync-directory "org") 2))
(add-to-list 'org-agenda-files jh/sync-directory)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no
(setq org-tags-match-list-sublevels 'indented)
#+END_SRC

I don't need an indicator of tasks blocked.
#+BEGIN_SRC emacs-lisp
(setq org-agenda-dim-blocked-tasks nil)
#+END_SRC

Start showing the deadline in Org-Agenda for task going to due in 90 days.
#+BEGIN_SRC emacs-lisp
(setq org-deadline-warning-days 14)
#+END_SRC

Customise Org-agenda TODO view.
#+BEGIN_SRC emacs-lisp :tangle no
(setq org-agenda-prefix-format
      '((agenda . " %i %-12:c%?-12t% s")
	(todo . " %i %-12:c %l")
	(tags . " %i %-12:c")
	(search . " %i %-12:c")))
#+END_SRC

References:
1. https://emacs.stackexchange.com/questions/5900/how-can-i-view-the-hierarchy-of-todo-keywords-in-org-agenda-mode
2. http://www.cachestocaches.com/2016/9/my-workflow-org-agenda/
   Emacs config: https://github.com/gjstein/emacs.d/blob/master/config/gs-org.el
3. http://doc.norang.ca/org-mode.html#CustomAgendaViews

*** Org Agenda Utility

#+BEGIN_SRC emacs-lisp
(defun jh/skip-non-archivable-tasks ()
  "Skip trees that are not available for archiving"
  (save-restriction
    (widen)
    ;; Consider only tasks with done todo headings as archivable candidates
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max))))
          (subtree-end (save-excursion (org-end-of-subtree t))))
      (if (member (org-get-todo-state) org-todo-keywords-1)
          (if (member (org-get-todo-state) org-done-keywords)
              (let* ((daynr (string-to-number (format-time-string "%d" (current-time))))
                     (a-month-ago (* 60 60 24 (+ daynr 1)))
                     (last-month (format-time-string "%Y-%m-" (time-subtract (current-time) (seconds-to-time a-month-ago))))
                     (this-month (format-time-string "%Y-%m-" (current-time)))
                     (subtree-is-current (save-excursion
                                           (forward-line 1)
                                           (and (< (point) subtree-end)
                                                (re-search-forward (concat last-month "\\|" this-month) subtree-end t)))))
                (if subtree-is-current
                    subtree-end ; Has a date in this month or last month, skip it
                  nil))  ; available to archive
            (or subtree-end (point-max)))
        next-headline))))
#+END_SRC

#+RESULTS:
: jh/skip-non-archivable-tasks

#+BEGIN_SRC emacs-lisp
(defun jh/list-sublevels-for-projects-indented ()
  "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
  This is normally used by skipping functions where this variable is already local to the agenda."
  (if (marker-buffer org-agenda-restrict-begin)
      (setq org-tags-match-list-sublevels 'indented)
    (setq org-tags-match-list-sublevels nil))
  nil)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun jh/list-sublevels-for-projects ()
  "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
  This is normally used by skipping functions where this variable is already local to the agenda."
  (if (marker-buffer org-agenda-restrict-begin)
      (setq org-tags-match-list-sublevels t)
    (setq org-tags-match-list-sublevels nil))
  nil)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defvar jh/hide-scheduled-and-waiting-next-tasks t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun jh/toggle-next-task-display ()
  (interactive)
  (setq jh/hide-scheduled-and-waiting-next-tasks
        (not jh/hide-scheduled-and-waiting-next-tasks))
  (when  (equal major-mode 'org-agenda-mode)
    (org-agenda-redo))
  (message "%s WAITING and SCHEDULED NEXT Tasks"
           (if jh/hide-scheduled-and-waiting-next-tasks "Hide" "Show")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun jh/skip-stuck-projects ()
  "Skip trees that are not stuck projects"
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (if (jh/is-project-p)
          (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                 (has-next ))
            (save-excursion
              (forward-line 1)
              (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                (unless (member "WAITING" (org-get-tags-at))
                  (setq has-next t))))
            (if has-next
                nil
              next-headline)) ; a stuck project, has subtasks but no next task
        nil))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun jh/skip-non-stuck-projects ()
  "Skip trees that are not stuck projects"
  ;; (bh/list-sublevels-for-projects-indented)
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (if (jh/is-project-p)
          (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                 (has-next ))
            (save-excursion
              (forward-line 1)
              (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                (unless (member "WAITING" (org-get-tags-at))
                  (setq has-next t))))
            (if has-next
                next-headline
              nil)) ; a stuck project, has subtasks but no next task
        next-headline))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun jh/skip-non-projects ()
  "Skip trees that are not projects"
  ;; (bh/list-sublevels-for-projects-indented)
  (if (save-excursion (jh/skip-non-stuck-projects))
      (save-restriction
        (widen)
        (let ((subtree-end (save-excursion (org-end-of-subtree t))))
          (cond
           ((jh/is-project-p)
            nil)
           ((and (jh/is-project-subtree-p) (not (jh/is-task-p)))
            nil)
           (t
            subtree-end))))
    (save-excursion (org-end-of-subtree t))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun jh/skip-non-tasks ()
  "Show non-project tasks.
Skip project and sub-project tasks, habits, and project related tasks."
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (cond
       ((jh/is-task-p)
        nil)
       (t
        next-headline)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun jh/skip-project-trees-and-habits ()
  "Skip trees that are projects"
  (save-restriction
    (widen)
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (cond
       ((jh/is-project-p)
        subtree-end)
       ((org-is-habit-p)
        subtree-end)
       (t
        nil)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun jh/skip-projects-and-habits-and-single-tasks ()
  "Skip trees that are projects, tasks that are habits, single non-project tasks"
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (cond
       ((org-is-habit-p)
        next-headline)
       ((and jh/hide-scheduled-and-waiting-next-tasks
             (member "WAITING" (org-get-tags-at)))
        next-headline)
       ((jh/is-project-p)
        next-headline)
       ((and (jh/is-task-p) (not (jh/is-project-subtree-p)))
        next-headline)
       (t
        nil)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun jh/skip-project-tasks-maybe ()
  "Show tasks related to the current restriction.
When restricted to a project, skip project and sub project tasks, habits, NEXT tasks, and loose tasks.
When not restricted, skip project and sub-project tasks, habits, and project related tasks."
  (save-restriction
    (widen)
    (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
           (next-headline (save-excursion (or (outline-next-heading) (point-max))))
           (limit-to-project (marker-buffer org-agenda-restrict-begin)))
      (cond
       ((jh/is-project-p)
        next-headline)
       ((org-is-habit-p)
        subtree-end)
       ((and (not limit-to-project)
             (jh/is-project-subtree-p))
        subtree-end)
       ((and limit-to-project
             (jh/is-project-subtree-p)
             (member (org-get-todo-state) (list "NEXT")))
        subtree-end)
       (t
        nil)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun jh/skip-project-tasks ()
  "Show non-project tasks.
Skip project and sub-project tasks, habits, and project related tasks."
  (save-restriction
    (widen)
    (let* ((subtree-end (save-excursion (org-end-of-subtree t))))
      (cond
       ((jh/is-project-p)
        subtree-end)
       ((org-is-habit-p)
        subtree-end)
       ((jh/is-project-subtree-p)
        subtree-end)
       (t
        nil)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun jh/skip-non-project-tasks ()
  "Show project tasks.
Skip project and sub-project tasks, habits, and loose non-project tasks."
  (save-restriction
    (widen)
    (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
           (next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (cond
       ((jh/is-project-p)
        next-headline)
       ((org-is-habit-p)
        subtree-end)
       ((and (jh/is-project-subtree-p)
             (member (org-get-todo-state) (list "NEXT")))
        subtree-end)
       ((not (jh/is-project-subtree-p))
        subtree-end)
       (t
        nil)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun jh/skip-projects-and-habits ()
  "Skip trees that are projects and tasks that are habits"
  (save-restriction
    (widen)
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (cond
       ((jh/is-project-p)
        subtree-end)
       ((org-is-habit-p)
        subtree-end)
       (t
        nil)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun jh/skip-non-subprojects ()
  "Skip trees that are not projects"
  (let ((next-headline (save-excursion (outline-next-heading))))
    (if (jh/is-subproject-p)
        nil
      next-headline)))
#+END_SRC

*** Org Agenda Custom Views

#+BEGIN_SRC emacs-lisp
(setq org-agenda-custom-commands
      '(("n" "Agenda and all TODOs"
         ((agenda #1="")
          (alltodo #1#)))
        ("w" "Weekly Review"
         ((agenda "")))
        (" " "Agenda"
         ((agenda "" nil)
          (tags "REFILE"
                ((org-agenda-overriding-header "Tasks to Refile")
                 (org-tags-match-list-sublevels nil)))
          (tags-todo "-CANCELLED/!"
                     ((org-agenda-overriding-header "Stuck Projects")
                      (org-agenda-skip-function 'jh/skip-non-stuck-projects)
                      (org-agenda-sorting-strategy '(category-keep))))
          (tags-todo "-HOLD-CANCELLED/!"
                     ((org-agenda-overriding-header "Projects")
                      (org-agenda-skip-function 'jh/skip-non-projects)
                      (org-tags-match-list-sublevels 'indented)
                      (org-agenda-sorting-strategy '(category-keep))))
          (tags-todo "-CANCELLED/!NEXT"
                     ((org-agenda-overriding-header (concat "Project Next Tasks"
                                                            (if jh/hide-scheduled-and-waiting-next-tasks
                                                                ""
                                                              " (including WAITING and SCHEDULED tasks)")))
                      (org-agenda-skip-function 'jh/skip-projects-and-habits-and-single-tasks)
                      (org-tags-match-list-sublevels t)
                      (org-agenda-todo-ignore-scheduled jh/hide-scheduled-and-waiting-next-tasks)
                      (org-agenda-todo-ignore-deadlines jh/hide-scheduled-and-waiting-next-tasks)
                      (org-agenda-todo-ignore-with-date jh/hide-scheduled-and-waiting-next-tasks)
                      (org-agenda-sorting-strategy '(todo-state-down effort-up category-keep))))
          (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
                     ((org-agenda-overriding-header (concat "Project Subtasks"
                                                            (if jh/hide-scheduled-and-waiting-next-tasks
                                                                ""
                                                              " (including WAITING and SCHEDULED tasks)")))
                      (org-agenda-skip-function 'jh/skip-non-project-tasks)
                      (org-agenda-todo-ignore-scheduled jh/hide-scheduled-and-waiting-next-tasks)
                      (org-agenda-todo-ignore-deadlines jh/hide-scheduled-and-waiting-next-tasks)
                      (org-agenda-todo-ignore-with-date jh/hide-scheduled-and-waiting-next-tasks)
                      (org-agenda-sorting-strategy '(category-keep))))
          (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
                     ((org-agenda-overriding-header (concat "Standalone Tasks"
                                                            (if jh/hide-scheduled-and-waiting-next-tasks
                                                                ""
                                                              " (including WAITING and SCHEDULED tasks)")))
                      (org-agenda-skip-function 'jh/skip-project-tasks)
                      (org-agenda-todo-ignore-scheduled jh/hide-scheduled-and-waiting-next-tasks)
                      (org-agenda-todo-ignore-deadlines jh/hide-scheduled-and-waiting-next-tasks)
                      (org-agenda-todo-ignore-with-date jh/hide-scheduled-and-waiting-next-tasks)
                      (org-agenda-sorting-strategy '(category-keep))))
          (tags-todo "-CANCELLED+WAITING|HOLD/!"
                     ((org-agenda-overriding-header (concat "Waiting and Postponed Tasks"
                                                            (if jh/hide-scheduled-and-waiting-next-tasks
                                                                ""
                                                              " (including WAITING and SCHEDULED tasks)")))
                      (org-agenda-skip-function 'jh/skip-non-tasks)
                      (org-tags-match-list-sublevels nil)
                      (org-agenda-todo-ignore-scheduled jh/hide-scheduled-and-waiting-next-tasks)
                      (org-agenda-todo-ignore-deadlines jh/hide-scheduled-and-waiting-next-tasks)))
          (tags "-REFILE/"
                ((org-agenda-overriding-header "Tasks to Archive")
                 (org-agenda-skip-function 'jh/skip-non-archivable-tasks)
                 (org-tags-match-list-sublevels nil))))
         nil)
        ))
#+END_SRC

** Org and Appt
#+BEGIN_SRC emacs-lisp
(require 'appt)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq appt-message-warning-time 60)
(setq appt-display-interval 10)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun jh/org-agenda-to-appt ()
  "Erase all reminders and rebuilt reminders for today from the agenda."
  (interactive)
  (setq appt-time-msg-list nil)
  (org-agenda-to-appt))
#+END_SRC

Build the reminder after Emacs started.
#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook 'jh/org-agenda-to-appt)
#+END_SRC

Rebuild the reminders everytime the agenda is display.
#+BEGIN_SRC emacs-lisp
(add-hook 'org-agenda-finalize-hook 'jh/org-agenda-to-appt 'append)
#+END_SRC

Activate appointments to get notifications.
#+BEGIN_SRC emacs-lisp
(appt-activate t)
#+END_SRC

Reset the appointments if I leave Emacs running overnight.
#+BEGIN_SRC emacs-lisp
(run-at-time "24:01" nil 'jh/org-agenda-to-appt)
#+END_SRC

References:
1. http://doc.norang.ca/org-mode.html#Reminders

** Org Tasks

Bernt Hansen[fn:30] has a good article on GTD. The following diagram shows the possible state transitions for a tasks:
#+begin_src plantuml :file normal_task_states.png :cache yes
title Task States
[*] -> TODO
TODO -> NEXT
TODO -> DONE
NEXT -> DONE
DONE -> [*]
TODO --> WAITING
WAITING --> TODO
NEXT --> WAITING
WAITING --> NEXT
HOLD --> CANCELLED
WAITING --> CANCELLED
CANCELLED --> [*]
TODO --> HOLD
HOLD --> TODO
TODO --> CANCELLED
TODO: t
NEXT: n
DONE: d
WAITING:w
note right of WAITING: Note records\nwhat it is waiting for
HOLD:h
note right of CANCELLED: Note records\nwhy it was cancelled
CANCELLED:c
WAITING --> DONE
#+end_src
[[file:images/org_task_states.png][Org TODO task states]]

#+BEGIN_SRC emacs-lisp
(setq org-treat-insert-todo-heading-as-state-change t)  ;; to invoke timestamp log

(setq org-todo-keywords
      '((sequence "TODO(t!)" "NEXT(n)" "|" "DONE(d)")
	    (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)")))

(setq org-todo-keyword-faces
      '(("TODO" :foreground "red" :weight bold)
	    ("NEXT" :foreground "blue" :weight bold)
	    ("DONE" :foreground "forest green" :weight bold)
	    ("WAITING" :foreground "DeepPink4" :weight bold)
	    ("HOLD" :foreground "magenta" :weight bold)
	    ("CANCELLED" :foreground "forest green" :weight bold)))
#+END_SRC

For record purposes:
#+BEGIN_SRC emacs-lisp
(setq org-log-done 'time)
#+END_SRC

Log state change notes and timestamps into drawer. Avoid cluttering my org entries.
#+BEGIN_SRC emacs-lisp
(setq org-log-into-drawer t)
#+END_SRC

Enforce TODO dependencies. To do A before B, before C, ... 
#+BEGIN_SRC emacs-lisp
(setq org-enforce-todo-dependencies t)
#+END_SRC

Customise priority to allow for four options: #A, #B, #C, #D. #C is the default priority. #D for unimportant tasks. #B for important tasks. #A for top one priority.
#+BEGIN_SRC emacs-lisp
(setq org-highest-priority 65)
(setq org-lowest-priority 68)
(setq org-default-priority 67)
#+END_SRC

References:
1. https://orgmode.org/manual/Closing-items.html
   Org-log-done variable.
2. [[info:org#TODO%20dependencies][info:org#TODO dependencies]]
3. http://doc.norang.ca/org-mode.html#TasksAndStates

** Archiving Subtrees

Archiving can keep my main working files clutter-free. It keeps my files contributing to the agenda fairly current. It cleans up my project trees and removes the old tasks that are no longer interesting.

Tasks to archive are listed automatically at the end of agenda. They can have any todo state.
#+BEGIN_SRC emacs-lisp
(setq org-archive-mark-done nil)
(setq org-archive-location "%s_archive::* Archived Tasks")
#+END_SRC

** Org Time Clocking

#+BEGIN_SRC emacs-lisp
(setq org-clock-persist t)
(org-clock-persistence-insinuate)
#+END_SRC

Besides Bernt Hansen, Lee Hinman[fn:31] has good config on org-clocking. 
#+BEGIN_SRC emacs-lisp
;; Show lots of clocking history.
(setq org-clock-history-length 23) 

;; Removes clocked tasks with 0:00 duration. I want to clock only deep works.
(setq org-clock-out-remove-zero-time-clocks t) 

;; Set task to a special todo state while clocking it
(setq org-clock-in-switch-to-state "NEXT")

;; Insert clocking info into the drawer
(setq org-clock-into-drawer t)

;; Stop clocking when the task is marked DONE
(setq org-clock-out-when-done t)
#+END_SRC

Open prompt to resolve clock if I idle more than 120 minutes.
#+BEGIN_SRC emacs-lisp
(setq org-clock-idea-time 120) ;; minutes
#+END_SRC

Use =org-mru-clock= package to clock into recent org-mode tasks. By default, org can clock into the last task. But sometimes I would like to clock into recent tasks.
#+BEGIN_SRC emacs-lisp
(require-package 'org-mru-clock)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-mru-clock-how-many 20)
(setq org-mru-clock-completing-read #'ivy-completing-read)
#+END_SRC

** Org-Gcal
:PROPERTIES:
:header-args: :tangle no
:END:

Org sync with Google Calendar. 
#+BEGIN_SRC emacs-lisp
(require-package 'org-gcal) ;; https://github.com/kidd/org-gcal.el 
#+END_SRC

#+BEGIN_SRC emacs-lisp
(require 'org-gcal)
(setq org-gcal-client-id (password-store-get-field "api/gcal-client" "client-id")
      org-gcal-client-secret (password-store-get-field "api/gcal-client" "client-secret"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-gcal-file-alist `((,(password-store-get-field "personal-info" "personal-gmail") . ,(jh/file-in-sync-directory "org" "gcal.txt"))))
#+END_SRC

Sync semi-automatically.
#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook (lambda () (org-gcal-sync) ))
;; (add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync) ))
;; (add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync) ))
#+END_SRC

References:
1. https://cestlaz.github.io/posts/using-emacs-26-gcal/

* Org Capture, Refile, Archive

** Org Capture

Set the default destination for notes captured.
#+BEGIN_SRC emacs-lisp
(setq org-default-notes-file (jh/file-in-sync-directory "org" "orgcapture.txt"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC

Define org-capture-templates.
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
      `(("t" "Org-capture for GTD")
        ("to" "Todo" entry (file+headline "" "Tasks")
         "* TODO %?\nCREATED: %U\n%i\n\n  " :prepend t :empty-lines 1)
        ("tt" "Task" entry (file+headline "" "Tasks")
         "* NEXT %?\n%t\n%i\n\n " :prepend t :clock-in t :clock-keep t)
        ("i" "An Idea to Explore" entry (file+headline "" "Ideas")
         "* %?\n%t\n%i\n\n ")
        ("j" "Journal" item (file+olp+datetree ,(jh/file-in-sync-directory "journal.txt")) "(%<%R>) %?\n%i\n" :empty-lines 1)
        ("e" "Engineering Journal" item (file+olp+datetree ,(jh/file-in-sync-directory "engineering_journal.txt")) "(%<%R>) %?\n%i\n" :empty-lines 1)
        ("p" "Punch In" entry (file+olp+datetree ,(jh/file-in-sync-directory "org" "gtd.org")) "* Daily Punch In" :clock-in t :clock-keep t :immediate-finish t)))
#+END_SRC

References:
1. https://orgmode.org/manual/Capture-templates.html
   Official docs. Taking it as a starting point.
2. https://www.reddit.com/r/emacs/comments/7zqc7b/share_your_org_capture_templates/duq0nnr

** Org Refile

#+BEGIN_SRC emacs-lisp
(defun jh/opened-buffer-files ()
  "Return the list of files currently opened in emacs"
 ) 
#+END_SRC

Refile to all org buffers, included current buffer and org-agenda-files.
#+BEGIN_SRC emacs-lisp
(setq org-refile-targets
      '((org-buffer-list :maxlevel . 3)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-refile-use-outline-path t)
#+END_SRC

This is added because during refiling, my Ivy had an issue displaying all the options. All the options show as the same.
#+BEGIN_SRC emacs-lisp
;; Discussion: https://github.com/abo-abo/swiper/issues/1254
;; Solution: https://github.com/abo-abo/swiper/issues/444#issuecomment-286693939
(setq org-outline-path-complete-in-steps nil)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-refile-allow-creating-parent-nodes 'confirm)
#+END_SRC

Source: https://stackoverflow.com/a/26683663
#+BEGIN_SRC emacs-lisp
(defun jh/org-refile-to-datetree ()
  "Refile a subtree to a datetree corresponding to it's timestamp."
  (interactive)
  (let* ((datetree-date (org-entry-get nil "TIMESTAMP" t))
         (date (org-date-to-gregorian datetree-date)))
    (when date
      (save-excursion
        (org-cut-subtree)
        (org-datetree-find-date-create date)
        (org-narrow-to-subtree)
        (show-subtree)
        (org-end-of-subtree t)
        (newline)
        (goto-char (point-max))
        (org-paste-subtree 4)
        (widen)
        )
      )
    ))
#+END_SRC

References:
1. https://blog.aaronbieber.com/2017/03/19/organizing-notes-with-refile.html

* Org Export

#+BEGIN_SRC emacs-lisp
(require 'ox)
#+END_SRC

There is a need to format and share. This allows #+BIND keywords to work in an org buffer. Enable this for portability and reproducibility.
#+URL: https://emacs.stackexchange.com/a/29698
#+BEGIN_SRC emacs-lisp
(setq org-export-allow-bind-keywords t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-latex-prefer-user-labels t)
#+END_SRC

To export an Org-file into HTML file, install package =htmlize= to export Org file into HTML files. Then, export using an external CSS file instead of the original =inline-css= option.
#+BEGIN_SRC emacs-lisp
(require-package 'htmlize)
(setq org-html-htmlize-output-type 'css)
#+END_SRC

Override Org-mode subscript and superscripts default behaviours during export.
#+BEGIN_SRC emacs-lisp
(setq org-export-with-sub-superscripts "{}")
#+END_SRC

#+url: https://tex.stackexchange.com/a/127287
#+BEGIN_SRC emacs-lisp
;;; Nicolas Goaziou, http://article.gmane.org/gmane.emacs.orgmode/67692
(defun org-latex-ignore-heading-filter-headline (headline backend info)
  "Strip headline from HEADLINE. Ignore BACKEND and INFO."
  (when (and (org-export-derived-backend-p backend 'latex)
             (string-match "\\`.*ignoreheading.*\n" headline))
    (replace-match "" nil nil headline)))
(add-to-list 'org-export-filter-headline-functions
             'org-latex-ignore-heading-filter-headline)
#+END_SRC

** LaTeX Export Code Syntax Highlighting
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-latex-packages-alist '("" "minted"))
(setq org-latex-listings 'minted)
#+END_SRC

References:
1. https://emacs.stackexchange.com/a/45051

** Org-latex-subfigure
#+BEGIN_SRC emacs-lisp
(use-package ox-latex-subfigure
  :init (setq org-latex-prefer-user-labels t)
  :load-path "lisp/ox-latex-subfigure"
  :config (require 'ox-latex-subfigure))
#+END_SRC

* Org Publish
#+BEGIN_SRC emacs-lisp
(use-package ox-publish
  :ensure nil
  :init
  (setq jh/blog-header-file "~/Dropbox/DropSyncFiles/blog-writing/resources/header.html"
        jh/blog-footer-file "~/Dropbox/DropSyncFiles/blog-writing/resources/footer.html")

  ;; Load partials on memory
  (defun jh/read-my-blog-header (arg)
    (with-temp-buffer
      (insert-file-contents jh/blog-header-file)
      (buffer-string)))

  (defun jh/read-my-blog-footer (arg)
    (with-temp-buffer
      (insert-file-contents jh/blog-footer-file)
      (buffer-string)))

  :config
  (setq org-publish-project-alist
        '(;; Articles
          ("technical-notes"
           :base-directory "~/Dropbox/DropSyncFiles/blog-writing/technical"
           :base-extension "txt"
           :recursive t
           :exclude "^\\..*"
           :auto-sitemap t
           :sitemap-filename "sitemap.txt"
           :sitemap-sort-files anti-chronologically
           :sitemap-sort-files first
           :publishing-directory "~/machines/blog/technical"
           :publishing-function org-html-publish-to-html
           :html-head nil
           :html-head-include-default-style nil
           :html-head-include-scripts nil
           :html-preamble jh/read-my-blog-header
           :html-postamble jh/read-my-blog-footer)

          ("blog-static"
           :base-directory "~/Dropbox/DropSyncFiles/blog-writing/resources"
           :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|eot\\|svg\\|woff\\|woff2\\|ttf"
           :publishing-directory "~/machines/blog/resources"
           :publishing-function org-publish-attachment)

          ("blog" :components ("technical-notes" "blog-static")))))
#+END_SRC

* Org Enhancements
#+BEGIN_SRC emacs-lisp
(use-package orglink-cursor
  :load-path "lisp/orglink-cursor"
  :hook (org-mode . orglink-cursor-mode))
#+END_SRC
* Evil's Reading-State for Org-mode

Define an Evil's state for easy browsing, reading, and navigating in Org-mode. This serves as a higher level of abstraction over the NORMAL "mode" because like org-speed-key-commands, it offers quick keys to perform actions on the level of trees, subtrees, properties, tags, and org source blocks while the NORMAL "mode" navigates between lines. I think NORMAL "mode" is good for editing but what I want is a "mode" in Org-mode for reading. So I define an Evil state to achieve that.
#+BEGIN_SRC emacs-lisp
(evil-define-state reading
  "A state for reading, easy browsing, and quick navigation."
  :tag " <R> "
  :cursor hollow
  :suppress-keymap t
  :message "-- READING --"
  (cond
   ((evil-reading-state-p)
    (evil-echo "-- READING --"))
   (t
    (evil-echo "-- NORMAL --")))) ;; original theme color for cursor
#+END_SRC

Dependencies:
1. ivy
2. evil
3. 

#+BEGIN_SRC emacs-lisp
(defun jh/org-goto-first-child ()
  "Wrapper function for the original function."
  (interactive)
  (org-show-children) ;; expand tree
  (org-goto-first-child))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun jh/outline-next-visible-heading (&optional count)
  "Essentially advise the outline-next-visible-heading function."
  (interactive "p")
  (outline-next-visible-heading 1)
  ;; (org-tree-to-indirect-buffer)
  (org-display-outline-path))

(defun jh/outline-previous-visible-heading (&optional count)
  "Essentially advise the outline-previous-visible-heading function."
  (interactive "p")
  (outline-previous-visible-heading 1)
  ;; (org-tree-to-indirect-buffer)
  (org-display-outline-path))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; ISSUE: The org-insert-heading does not detect that the cursor is at the beginning of line.
;; WORKAROUND: Force move the cursor to the beginning of line before inserting a new heading.
(defun jh/org-insert-heading-into-insert-state (&optional count)
  "Add a new sibling heading at the position of the current heading, and go into insert state."
  (interactive "p")
  (org-beginning-of-line) ;; force to the beginning of line.
  (org-insert-heading)
  (evil-insert-state))

(defun jh/org-insert-heading-after-current-into-insert-state (&optional count)
  "Add a new sibling heading and go into insert state."
  (interactive "p")
  (org-beginning-of-line) ;; force to the beginning of line.
  (org-insert-heading-after-current)
  (evil-insert-state))
#+END_SRC

Define all the keys for this "mode".
For headings:
#+BEGIN_SRC emacs-lisp
(define-key evil-reading-state-map (kbd "i") #'evil-normal-state)
(define-key evil-reading-state-map (kbd "h") #'outline-up-heading)
(define-key evil-reading-state-map (kbd "j") #'jh/outline-next-visible-heading)
(define-key evil-reading-state-map (kbd "k") #'jh/outline-previous-visible-heading)
(define-key evil-reading-state-map (kbd "l") #'jh/org-goto-first-child)
(define-key evil-reading-state-map (kbd "?\t") #'org-cycle)
;; (define-key evil-reading-state-map (kbd "") #')

(define-key evil-reading-state-map (kbd "o") #'jh/org-insert-heading-after-current-into-insert-state)
(define-key evil-reading-state-map (kbd "O") #'jh/org-insert-heading-into-insert-state)
#+END_SRC

For screen scrolling:
#+BEGIN_SRC emacs-lisp
(define-key evil-reading-state-map (kbd "f") #'evil-scroll-page-down)
(define-key evil-reading-state-map (kbd "b") #'evil-scroll-page-up)
(define-key evil-reading-state-map (kbd "<SPC>") #'evil-scroll-page-down)
(define-key evil-reading-state-map (kbd "<S-SPC>") #'evil-scroll-page-up)
#+END_SRC

For blocks:
#+BEGIN_SRC emacs-lisp
(define-key evil-reading-state-map (kbd "s") #'org-next-block)
(define-key evil-reading-state-map (kbd "r") #'org-previous-block)
(define-key evil-reading-state-map (kbd "'") #'org-edit-special)
#+END_SRC

For searches/filter:
#+BEGIN_SRC emacs-lisp
(define-key evil-reading-state-map (kbd "/ /") #'counsel-org-goto)
(define-key evil-reading-state-map (kbd "/ r") #'evil-search-forward)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(define-key evil-reading-state-map (kbd "u") 'undo-tree-undo)
(define-key evil-reading-state-map (kbd ":") #'evil-ex)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun jh/add-key-to-reading-state ()
  "A private function to add key to reading state."
  (evil-define-key 'normal org-mode-map (kbd "gr") #'evil-reading-state))

(add-hook 'org-mode-hook 'jh/add-key-to-reading-state)
#+END_SRC

References:
1. https://github.com/edwtjo/evil-org-mode/blob/master/evil-org.el
   The author defines an evil-org minor-mode. Bu it gives me an idea of simply defining a function and hook it to org-mode.
2. https://github.com/KNX32542/syndicate
   I didn't use this. But it might give a good customisation idea.
3. https://github.com/GuiltyDolphin/org-evil
   Or this. I didn't use this as well.
4. https://stackoverflow.com/a/4932922
   Cursor color.
5. github:alphapapa/org-graph-view & github:jethrokuan/org-roam
   Check this out: view org buffers as a clickable, graphical mind-map.
* Org Literate Programming/ Org-babel/ Ox-babel
#+BEGIN_SRC emacs-lisp
(setq org-confirm-babel-evaluate nil)
(setq org-src-fontify-natively t)
(setq org-src-tab-acts-natively t)
(setq org-edit-src-content-indentation 0) ; don't indent source code relative to the #+BEGIN_SRC org-src block
(setq org-src-window-setup 'other-window) ; edit org-src block in the other window instead of force organising all the windows side-by-side

;; org template for commonly used language
(add-to-list 'org-structure-template-alist '("el" "#+BEGIN_SRC emacs-lisp?\n#+END_SRC"))
(add-to-list 'org-structure-template-alist '("py" "#+BEGIN_SRC python\n?\n#+END_SRC"))
(add-to-list 'org-structure-template-alist '("sh" "#+BEGIN_SRC shell\n?\n#+END_SRC"))
(add-to-list 'org-structure-template-alist '("jp" "#+BEGIN_SRC jupyter-python\n?\n#+END_SRC"))
(add-to-list 'org-structure-template-alist '("di" "#+BEGIN_SRC ditaa :file ?.png :cmdline -r -s 0.8\n\n#+END_SRC"))
(add-to-list 'org-structure-template-alist '("dot" "#+BEGIN_SRC dot :file ?.png :cmdline -Kdot -Tpng\n\n#+END_SRC"))
(add-to-list 'org-structure-template-alist '("pl" "#+BEGIN_SRC plantuml :file ?.png \n\n#+END_SRC"))
(add-to-list 'org-structure-template-alist '("cl" "#+BEGIN_SRC lisp\n?\n#+END_SRC"))

;; append code to the targeted file, see https://emacs.stackexchange.com/a/38898
(defun org-babel-tangle-append ()
  "Append source code block at point to its tangle file.
   The command works like `org-babel-tangle' with prefix arg
   but `delete-file' is ignored."
  (interactive)
  (cl-letf (((symbol-function 'delete-file) #'ignore))
    (org-babel-tangle '(4))))


(add-hook 'org-babel-after-execute-hook 'org-display-inline-images) ; auto-display generated image after org-src execution, especially useful for ob-jupyter, ob-ditaa, Graphviz and PlantUML

(use-package ob-async
  ;; Run ob-babel asynchronously
  ;; Note: it doesn't support :session header-arg. See: https://github.com/astahlman/ob-async/issues/1
  :config
  (setq ob-async-no-async-languages-alist '("jupyter-python" "jupyter-julia")))

;; Load all babel supported language
(org-babel-do-load-languages
 'org-babel-load-languages
 '((R . t)
   (ditaa . t)
   (dot . t)
   (emacs-lisp . t)
   (gnuplot . t)
   (haskell . nil)
   (latex . t)
   (ledger . t)
   (ocaml . nil)
   (octave . t)
   (plantuml . t)
   (python . t)
   (ruby . t)
   (screen . nil)
   (shell . t)
   (sqlite . t)
   (scheme . t)
   (C . t)))
#+END_SRC

References:
1. https://robmoss.github.io/2018/02/19/Live-coding-Emacs-and-ghci
2. https://github.com/dzop/emacs-jupyter/issues/178
3. github:astahlman/ob-async
* Emacs Research
** Ivy-bibtex

A bibliography manager based on Ivy.
#+BEGIN_SRC emacs-lisp
(require-package 'ivy-bibtex)
#+END_SRC

Pressing <enter> triggers the "default action". This is the default behaviour -- search for PDF to open, if not, its URL or DOI.
#+BEGIN_SRC emacs-lisp
(setq ivy-bibtex-default-action 'ivy-bibtex-open-any)
#+END_SRC

Specify the path to all .bib files.
#+BEGIN_SRC emacs-lisp
(setq bibtex-completion-bibliography (directory-files-recursively "~/Documents/papers" "\.bib$"))
#+END_SRC

Specify the directories to search for PDFs.
#+BEGIN_SRC emacs-lisp
(setq bibtex-completion-library-path (jh/get-all-subdirs "~/Documents/papers" 5))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq bibtex-completion-notes-path "~/Documents/papers/notes.txt")
#+END_SRC

References:
1. https://github.com/tmalsburg/helm-bibtex/tree/e1391a4be629b506f06d678bcdfd17d290904482

** ebib

I discover that ~ivy-bibtex~ works with ~ebib~.
#+BEGIN_SRC emacs-lisp
(require-package 'ebib)
#+END_SRC

Launch ~ebib~ in evil-emacs-state.
#+BEGIN_SRC emacs-lisp
(evil-set-initial-state 'ebib-index-mode 'emacs)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq ebib-file-search-dirs '(""))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; (setq ebib-preload-bib-files bibtex-completion-bibliography)
(setq ebib-preload-bib-files (list "/home/zacque/Documents/Artificial_Intelligence/references.bib" "/home/zacque/Documents/bibliography/references.bib" "/home/zacque/Documents/Artificial_Intelligence/academic_papers/computer_vision/references.bib" "/home/zacque/Documents/Artificial_Intelligence/academic_papers/instance_segmentation/references.bib" "/home/zacque/Documents/Artificial_Intelligence/academic_papers/video_understanding/references.bib"))
#+END_SRC

Load the provided ~org~ebib~ package to provide org-mode integration. E.g. ebib org-link-type.
#+BEGIN_SRC emacs-lisp
(require 'org-ebib)
#+END_SRC
** Org-ref
=org-ref= is an Emacs library/org-mode modules for citations, cross-references, bibliographies and other useful bibtext tools.

#+BEGIN_SRC emacs-lisp
(setq org-ref-completion-library 'org-ref-ivy-cite)
#+END_SRC

This matches the APA citation style that I usually use.
#+BEGIN_SRC emacs-lisp
(setq org-ref-default-citation-link "Citep")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq reftex-default-bibliography bibtex-completion-bibliography)
#+END_SRC

Not quite sure the differences between these and the =reftex-default-bibliography= variable.
#+BEGIN_SRC emacs-lisp
(setq org-ref-bibliography-notes "~/Documents/papers/notes.txt"
      org-ref-default-bibliography reftex-default-bibliography
      org-ref-pdf-directory "~/Documents/papers/miscellaneous/")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(require-package 'org-ref)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun jh/add-bib-to-org-ref ()
  "Add the current .bib file to org-ref."
  (interactive)
  (unless (buffer-file-name)
    (error "No file is being viewed."))
  (add-to-list 'org-ref-default-bibliography (buffer-file-name)))
#+END_SRC

To open org pdf link with Emacs pdf tools. Reference: https://github.com/jkitchin/org-ref/issues/184#issuecomment-303553448
#+BEGIN_SRC emacs-lisp
(setq org-file-apps 
      '((auto-mode . emacs)
        ("\\.mm\\'" . default)
        ("\\.x?html?\\'" . default)
        ("\\.pdf\\'" . emacs)))
#+END_SRC

To compile LaTeX document with citations:
#+BEGIN_SRC emacs-lisp
(setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-latex-logfiles-extensions  '("lof" "lot" "tex" "aux" "idx" "log" "out" "toc" "nav" "snm" "vrb" "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc" "ps" "spl" "bbl" "pygtex" "pygstyle"))
#+END_SRC

#+URL: https://tex.stackexchange.com/a/372988
#+BEGIN_SRC emacs-lisp
(setq tex-run-command "pdftex")
(setq tex-bibtex-command "biber")
(setq latex-run-command "pdflatex")
#+END_SRC

References:
1. https://nickgeorge.net/science/org_ref_setup/
** Arxiv
Load the library to enable arxiv org-link support, e.g. arxiv:0801.1144.
#+BEGIN_SRC emacs-lisp
(require 'org-ref-arxiv)
#+END_SRC

References:
1. http://kitchingroup.cheme.cmu.edu/blog/2015/03/09/Bibtex-Entries-from-Arxiv-org/

* Writing Experience
** Writing in Chinese Pinyin
Writing in Chinese pinyin [fn:18]. Use =set-input-method= to switch between languages. Use =toggle-input-method= to easily switch back.
#+BEGIN_SRC emacs-lisp
(use-package pyim
  :config
  (setq pyim-dicts `((:name "hugedict" :file ,(jh/emacs-subdirectory "pyim/dict/pyim-bigdict.pyim"))))

  ;; pinyin dictionary for =pyim= package.
  (use-package pyim-basedict
    :config (pyim-basedict-enable)))
#+END_SRC

Use "pyim" as default input method. Then I can invoke =toggle-input-method= anywhere to type Chinese.
#+BEGIN_SRC emacs-lisp
(setq default-input-method "pyim")
#+END_SRC

** Spelling Checker (Flyspell-mode)

Flyspell-mode is a built-in package with Emacs.
#+BEGIN_SRC emacs-lisp
(require 'flyspell)
#+END_SRC

I prefer British spelling to US spelling.
#+BEGIN_SRC emacs-lisp
(setq ispell-dictionary "british-ise")
#+END_SRC

Remove the default "M-TAB" binding to flyspell-auto-correct-word. Currently, I am using it for pcomplete.
#+BEGIN_SRC emacs-lisp
(define-key flyspell-mode-map (kbd "C-M-i") nil)
#+END_SRC

* Alert
#+BEGIN_SRC emacs-lisp
(require-package 'alert)
#+END_SRC

Pop up desktop notification on Linux.
#+BEGIN_SRC emacs-lisp
(setq alert-default-style 'libnotify)
#+END_SRC

References:
1. https://github.com/jwiegley/alert
* Projectile Mode
A package for project management and navigation.
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :bind ("s-p" . projectile-command-map)
  :config
  (setq-default projectile-mode-line-prefix " Proj") ;; Shorter modeline
  (setq projectile-completion-system 'ivy)
  (projectile-mode +1))
#+END_SRC

Extra:
1. [[Ripgrep Package][Integration with Ripgrep Package]]
   Install the ripgrep package.

Note:
1. Check out counsel-projectile package for customisation code guidance.

Customisation idea:
1. Use rg search by default, coupled with ivy completing system.
* Eglot -- LSP Client
Eglot is a Language Server Protocol(LSP) server client. It has default integration with flymake and is aiming to be integrated into Emacs.
#+BEGIN_SRC emacs-lisp :noweb yes
(use-package eglot
  :config
  <<eglot-shutdown-config>>

  <<eglot-flymake-config>>)
#+END_SRC

Automatically shutdown Eglot after the last managed buffer is killed. Checkout: github:joaotavora/eglot#305
#+NAME: eglot-shutdown-config
#+BEGIN_SRC emacs-lisp :tangle no
(setq eglot-autoshutdown t)
#+END_SRC

Flymake-diagnostics-function
github:joaotavora/eglot#268
#+NAME: eglot-flymake-config
#+BEGIN_SRC emacs-lisp :tangle no
(add-to-list 'eglot-stay-out-of 'flymake)

(defun jh/--enable-eglot-flymake-backend ()
  (add-hook 'flymake-diagnostic-functions 'eglot-flymake-backend nil t))

(add-hook 'eglot--managed-mode-hook 'jh/--enable-eglot-flymake-backend)
#+END_SRC

* Terraform
Major mode for terraform configuration file.
#+BEGIN_SRC emacs-lisp
(use-package terraform-mode
  :mode "\\.tf\\(vars\\)?\\'"
  :config
  (use-package company-terraform
    :config (company-terraform-init)))
#+END_SRC

References:
1. https://github.com/syohex/emacs-terraform-mode
2. https://github.com/rafalcieslak/emacs-company-terraform
* Eshell & VTerm
** Eshell as my Terminal
Eshell is a shell, not a terminal emulator. It plays well with CLI, but not TUI. However, since Emacs has UI, some commands might have a replacement in Emacs. E.g. top -> proced, alsomixer -> volume.
#+BEGIN_SRC emacs-lisp
(require 'eshell)
(require 'esh-mode)
#+END_SRC

Start Eshell in Emacs state.
#+BEGIN_SRC emacs-lisp
(evil-set-initial-state 'eshell-mode 'emacs)
#+END_SRC

Enable Plan9 smart shell display.
#+BEGIN_SRC emacs-lisp
(require 'em-smart)
(setq eshell-where-to-jump 'begin)
(setq eshell-review-quick-commands nil)
(setq eshell-smart-space-goes-to-end t)
#+END_SRC

Use ~/.bash_history for eshell.
#+BEGIN_SRC emacs-lisp
(setenv "HISTFILE" "/home/zacque/.bash_history")
(setq eshell-history-file-name nil) ;; use HISTFILE value
#+END_SRC

*Note:* Eshell does not support unbounded history length.
#+BEGIN_SRC emacs-lisp
(setq eshell-history-size 9999999)
(setq eshell-save-history-on-exit t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq eshell-buffer-maximum-lines 4096)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq eshell-scroll-to-bottom-on-input t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq eshell-cmpl-ignore-case t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq eshell-hist-ignoredups t)
#+END_SRC

To kill *top* buffer on exiting the process.
#+BEGIN_SRC emacs-lisp
(setq eshell-destroy-buffer-when-process-dies t)
#+END_SRC

Make the Eshell prompt behaves more like Bash.
#+URL: https://www.emacswiki.org/emacs/EshellPrompt#toc6
#+BEGIN_SRC emacs-lisp
(defun jh/--eshell-prompt ()
  (let* ((home (getenv "HOME"))
         (login-info (concat (user-login-name) "@" (system-name) ":"))
         (pwd (replace-regexp-in-string "/home/zacque" "~" (eshell/pwd))))
    (concat
     (propertize login-info 'face `(:foreground "green"))
     (propertize pwd 'face `(:foreground "gold"))
     (if (= (user-uid) 0) "# " "$ "))))

(setq eshell-prompt-function 'jh/--eshell-prompt)
(setq eshell-prompt-regexp "^[^#$\n]*[#$] ")
#+END_SRC

[Not Working] Caching sudo password in eshell. This is useful so that eshell does not prompt for password for every sudo command [fn:15].
#+BEGIN_SRC emacs-lisp
(require 'em-tramp)
(setq eshell-prefer-lisp-functions t)
(setq eshell-prefer-lisp-variables t)
(setq password-cache t)
(setq password-cache-expiry 600) ;; seconds
#+END_SRC

Progress bar for apt in shell. Source: https://oremacs.com/2019/03/24/shell-apt/
#+BEGIN_SRC emacs-lisp
(advice-add
 'ansi-color-apply-on-region
 :before 'ora-ansi-color-apply-on-region)

(defun ora-ansi-color-apply-on-region (begin end)
  "Fix progress bars for e.g. apt(8).
Display progress in the mode line instead."
  (let ((end-marker (copy-marker end))
        mb)
    (save-excursion
      (goto-char (copy-marker begin))
      (while (re-search-forward "\0337" end-marker t)
        (setq mb (match-beginning 0))
        (when (re-search-forward "\0338" end-marker t)
          (ora-apt-progress-message
           (substring-no-properties
            (delete-and-extract-region mb (point))
            2 -2)))))))

;; (defun ora-apt-progress-message (progress)
;;   (setq mode-line-process
;;         (if (string-match
;;              "Progress: \\[ *\\([0-9]+\\)%\\]" progress)
;;             (list
;;              (concat ":%s "
;;                      (match-string 1 progress)
;;                      "%%%% "))
;;           '(":%s")))
;;   (force-mode-line-update))

(defun ora-apt-progress-message (progress)
  (message
   (replace-regexp-in-string
    "%" "%%"
    (ansi-color-apply progress))))
#+END_SRC

C-r to search previous history using ivy/counsel.
#+BEGIN_SRC emacs-lisp
(define-key eshell-mode-map (kbd "C-r") #'counsel-esh-history)
#+END_SRC

Use C-d to exit Eshell.
TODO: Only delete char if it's at the input line; otherwise, send C-d.
#+BEGIN_SRC emacs-lisp
(defun jh/eshell-quit-or-delete-char (arg)
  (interactive "p")
  (if (and (eolp)
           (looking-back eshell-prompt-regexp))
      (eshell-life-is-too-much) ; Why not? (eshell/exit)
    (delete-forward-char arg)))
(define-key eshell-mode-map (kbd "C-d") 'jh/eshell-quit-or-delete-char)
#+END_SRC

References:
1. https://github.com/peterwvj/emacs.d/blob/master/lisp/eshell-config-pvj.el
2. https://github.com/howardabrams/dot-files/blob/master/emacs-eshell.org
*** Personalisation & Beautification
Dependencies: xterm-color.

This will make =ls= output colourful.
#+BEGIN_SRC emacs-lisp
(defun jh/--eshell-set-term ()
  (setenv "TERM" "xterm-256color"))

(add-hook 'eshell-mode-hook 'jh/--eshell-set-term)
#+END_SRC

Not sure what this does.
#+BEGIN_SRC emacs-lisp
(defun jh/--eshell-enable-xterm-preserve-properties ()
  (setq xterm-color-preserve-properties t))

(add-hook 'eshell-mode-hook 'jh/--eshell-enable-xterm-preserve-properties)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-to-list 'eshell-preoutput-filter-functions 'xterm-color-filter)
(setq eshell-output-filter-functions (delete 'eshell-handle-ansi-color eshell-output-filter-functions))
#+END_SRC

Remove the default "Welcome to the Emacs shell\n\n" message on Eshell startup.
#+BEGIN_SRC emacs-lisp
(setq eshell-banner-message "")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq eshell-highlight-prompt t)
#+END_SRC

Customise Eshell font face to make it looks like a typical terminal emulator.
#+BEGIN_SRC emacs-lisp
(defun jh/--customise-eshell-display ()
  "Sets a special font for Org-mode writing and more."
  (buffer-face-set '(:family "Hack" :height 103))
  ;; (buffer-face-set '(:family "Hack"))
  (setq header-line-format " "))

(add-hook 'eshell-mode-hook #'jh/--customise-eshell-display)
#+END_SRC

References:
1. https://github.com/peterwvj/emacs.d/blob/master/lisp/eshell-config-pvj.el
*** Subcommand Completions
Eshell uses pcomplete package for programmable completion. Completions are defined as functions named =pcomplete/COMMAND=, where COMMAND is the name of the command for which this function provides completions.

References:
1. https://www.emacswiki.org/emacs/EshellCompletion#toc3
2. https://masteringemacs.org/article/pcomplete-context-sensitive-completion-emacs
**** Systemctl subcommand completion.
#+BEGIN_SRC emacs-lisp
(defcustom pcomplete-systemctl-commands
  '("disable" "enable" "status" "start" "restart" "stop" "reenable"
    "list-units" "list-unit-files")
  "p-completion candiates for `systemctl' main commands"
  :type '(repeat (string :tag "systemctl command"))
  :group 'pcomplete)

(defun pcomplete/systemctl ()
  "Completion rules for the `systemctl' command."
  (pcomplete-here pcomplete-systemctl-commands))
#+END_SRC

**** Man completion.
#+BEGIN_SRC emacs-lisp
(defvar pcomplete-man-user-commands
  (split-string
   (shell-command-to-string
    "apropos -s 1 .|while read -r a b; do echo \" $a\";done;"))
  "p-completion candidates for `man' command")

(defun pcomplete/man ()
  "Completion rules for the `man' command."
  (pcomplete-here pcomplete-man-user-commands))
#+END_SRC

**** Git completion.
#+BEGIN_SRC emacs-lisp
(defconst pcmpl-git-commands
  '("add" "bisect" "branch" "checkout" "clone"
    "commit" "diff" "fetch" "grep"
    "init" "log" "merge" "mv" "pull" "push" "rebase"
    "reset" "rm" "show" "status" "tag" )
  "List of `git' commands")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defvar pcmpl-git-ref-list-cmd "git for-each-ref refs/ --format='%(refname)'"
  "The `git' command to run to get a list of refs")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun pcmpl-git-get-refs (type)
  "Return a list of `git' refs filtered by TYPE"
  (with-temp-buffer
    (insert (shell-command-to-string pcmpl-git-ref-list-cmd))
    (goto-char (point-min))
    (let ((ref-list))
      (while (re-search-forward (concat "^refs/" type "/\\(.+\\)$") nil t)
        (add-to-list 'ref-list (match-string 1)))
      ref-list)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun pcomplete/git ()
  "Completion for `git'"
  (pcomplete-here* pcmpl-git-commands)

  (cond
   ;; complete files/dirs forever if the command is `add' or `rm'
   ((pcomplete-match (regexp-opt '("add" "rm")) 1)
    (while (pcomplete-here (pcomplete-entries))))
   ;; provide branch completion for the command `checkout'.
   ((pcomplete-match (regexp-opt '("checkout" "branch")) 1)
    (pcomplete-here* (pcmpl-git-get-refs "heads")))))
#+END_SRC

References:
1. https://masteringemacs.org/article/pcomplete-context-sensitive-completion-emacs

**** Bash-completion + eshell
#+BEGIN_SRC emacs-lisp
(use-package bash-completion
  :config
  (bash-completion-setup)
  (setq eshell-default-completion-function 'eshell-bash-completion)

  (defun eshell-bash-completion ()
    (while (pcomplete-here
            (nth 2 (bash-completion-dynamic-complete-nocomint
                    (save-excursion (eshell-bol) (point))
                    (point)))))))
#+END_SRC
Referecences:
1. https://github.com/andrejlamov/dotfiles/commit/17a716cbe4c8fd589212f319b9cca268c6e69eb9
*** Eshell-up
#+BEGIN_SRC emacs-lisp
(require-package 'eshell-up)
#+END_SRC
*** Eshell-z
#+BEGIN_SRC emacs-lisp
(require-package 'eshell-z)
#+END_SRC
*** Eshell-Did-You-Mean
:PROPERTIES:
:header-args: :tangle no
:END:
Not working!
#+BEGIN_SRC emacs-lisp
(require-package 'eshell-did-you-mean)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(eshell-did-you-mean-setup)
#+END_SRC

References:
1. https://github.com/xuchunyang/eshell-did-you-mean
** Libvterm/VTerm

*** Pre-requisite
<2019-08-25 Sun>

1. Libterm
   #+BEGIN_SRC shell
   sudo apt-get install libvterm-dev
   #+END_SRC
   
2. Libtool-bin
   #+BEGIN_SRC shell
   sudo apt-get install libtool-bin
   #+END_SRC

Fullfill the prerequisite. Clone the git repo. Build. And done.

*** Config

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/gitrepo/software/emacs-libvterm")
(require 'vterm)
#+END_SRC

Customise VTerm font face to make it looks more like a typical terminal emulator.
#+BEGIN_SRC emacs-lisp
(defun jh/--customise-vterm-display ()
  "Sets a special font for Org-mode writing and more."
  ;; (buffer-face-set '(:family "Hack" :height 103))
  (buffer-face-set '(:family "Hack"))
  (setq header-line-format " "))

(add-hook 'vterm-mode-hook #'jh/--customise-vterm-display)
#+END_SRC

To make the line wrapping in VTerm works normally. Reference: https://superuser.com/a/988843
#+BEGIN_SRC emacs-lisp
(defun jh/--truncate-lines ()
  (setq truncate-lines t))
(add-hook 'vterm-mode-hook #'jh/--truncate-lines)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(evil-set-initial-state 'vterm-mode 'emacs)
#+END_SRC

Exit buffer after exit vterm. Reference: https://github.com/akermu/emacs-libvterm/issues/24#issuecomment-438048042
#+BEGIN_SRC emacs-lisp
(add-hook 'vterm-exit-functions (lambda (process)
				  (kill-buffer)))
#+END_SRC
* Handy Small Functions
Open the current file-buffer using system viewer [fn:32].
#+BEGIN_SRC emacs-lisp
(defun jh/open-buffer-in-system-viewer()
  "Open current file-buffer using default desktop viewer."
  (interactive)
  (let ((path (if (buffer-file-name) (buffer-file-name) default-directory)))
    (let ((process-connection-type nil)
	  (cmd "/usr/bin/xdg-open"))
      (start-process "" nil cmd path))))
#+END_SRC

Open terminal in current file directory [fn:32].
#+BEGIN_SRC emacs-lisp
(defun jh/open-dir-in-terminal-here()
  "Open a new terminal window in the current dir."
  (interactive)
  (let ((process-connection-type nil))
    (start-process "" nil "x-terminal-emulator" (concat "--working-directory=" default-directory))))
#+END_SRC
Note: default-directory is a buffer-local variable that changes with buffers.

#+BEGIN_SRC emacs-lisp
(defun jh/search-sync-files()
  "Search from all files listed recursively in the sync dir."
  (interactive)
  (counsel-file-jump nil jh/sync-directory)) ;; using counsel-file-jump instead of find file
#+END_SRC

Directly search the contents of files in sync directory.
#+BEGIN_SRC emacs-lisp
(defun jh/search-sync-contents()
  "Search for sync contents."
  (interactive)
  (counsel-rg nil jh/sync-directory nil))
#+END_SRC
** Set Countdown Timer
#+BEGIN_SRC emacs-lisp
(defun jh/countdown-timer ()
  "Show a message after timer expires. Based on run-at-time and can understand time like it can."
  (interactive)
  (let* ((msg-to-show (read-string "Enter msg to show: "))
         (time-duration (read-string "Time? ")))
    (run-at-time time-duration nil #'alert msg-to-show)
    (message "Your timer is set.")))
#+END_SRC
Future ideas:
1. List timers.
2. Display timers content -- how many seconds left and strings.
3. Cancel timers.

References:
1. https://www.reddit.com/r/emacs/comments/7wsnoi/using_countdown_timers_for_alerts/du3h11l/
2. github:dakra/tea-timer.el
   For timer tracking functionalities.
* Config File Ending
#+BEGIN_SRC emacs-lisp
(defun jh/find-config()
  "A convenient function to edit this file: config.org."
  (interactive)
  (find-file "~/.emacs.d/config.org"))

(provide 'init-main)
#+END_SRC
* Archived                    :noexport:
:PROPERTIES:
:header-args: :tangle no
:END:
** Rendering HTML File-Buffer in a Browser

Status: Archived
Reason: This function is replaced by a more general system viewer function.

Sometimes I would have to read HTML files. Not to read its code, but its code. So its handy to be able to read/browse the file from a browser or, at least, a HTML renderer.

#+BEGIN_SRC emacs-lisp :tangle no
;; Browse current HTML file
(defun browse-current-html-file-buffer ()
  "Open the current file as a URL using `browse-url'."
  (interactive)
  (let ((file-name (buffer-file-name)))
    (if (and (fboundp 'tramp-tramp-file-p)
             (tramp-tramp-file-p file-name))
        (error "Cannot open tramp file")
      (browse-url (concat "file://" file-name)))))
#+END_SRC

** mu4e -- Email Client

I use =mu4e= to read emails from Emacs. On the desktop, =isync= package needs to be installed.
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e")
(require 'mu4e)
#+END_SRC

Open in full frame.
#+BEGIN_SRC emacs-lisp
(fullframe mu4e mu4e-quit)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq mu4e-confirm-quit nil)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq mu4e-hide-index-messages t)
#+END_SRC

Use mu4e as the default Emacs program to send email for =C-x m (compose-mail)= or =report-emacs-bug=.
#+BEGIN_SRC emacs-lisp
(setq mail-user-agent 'mu4e-user-agent) ;; use a the default client on emacs
#+END_SRC

Overrides the default folders to store messages. Note: The folder can be defined dynamically at runtime and changes according to the attributes of an email.
#+BEGIN_SRC emacs-lisp
(setq mu4e-maildir	 "~/Mail/outlook") ;; top-level Maildir

(setq mu4e-sent-folder "/Sent" ;; sent messages
      mu4e-drafts-folder "/Drafts" ;; unfinished messages
      mu4e-trash-folder "/Deleted" ;; trashed messages
      mu4e-refile-folder "/Archives") ;; saved messages
#+END_SRC

Override default to show both sender name and address. This makes me easier to filter sender using search query.
#+BEGIN_SRC emacs-lisp
(setq mu4e-view-show-addresses t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-hook 'message-send-hook
  (lambda ()
    (unless (yes-or-no-p "Sure you want to send this?")
      (signal 'quit nil))))
#+END_SRC

Defines the shell command to retrieve mails. Updates mail and index periodically for every N seconds.
#+BEGIN_SRC emacs-lisp :tangle no
(setq mu4e-get-mail-command "mbsync -a"
      mu4e-update-interval (* 10 60)) ;; re-index every 10 minutes
#+END_SRC

Update using systemd in the background.
#+BEGIN_SRC emacs-lisp
(setq mu4e-index-update-in-background nil
      mu4e-update-interval nil)
#+END_SRC

Speeds up mu4e updates.
#+BEGIN_SRC emacs-lisp
(setq mu4e-index-cleanup nil  ;; don't do a full cleanup check
      mu4e-index-lazy-check t) ;; don't consider up-to-date dirs
#+END_SRC

Sending mail from mu4e.
#+BEGIN_SRC emacs-lisp
;; Tell message-mode how to send email
(setq message-send-mail-function 'smtpmail-send-it)

;; Define the mail server to send email
(setq smtpmail-smtp-server "smtp-mail.outlook.com"
      smtpmail-smtp-service 587
      smtpmail-stream-type 'starttls)

;; Kill buffer after sending, instead of burying the buffer away
(setq message-kill-buffer-on-exit t) 
#+END_SRC

Queuing email is useful for offline mode.
#+BEGIN_SRC emacs-lisp :tangle no
(setq smtpmail-queue-mail nil
      smtpmail-queue-dir "~/Mail/outlook/queue")
#+END_SRC

#+BEGIN_SRC shell
mkdir ~/Mail/outlook/queue
touch ~/Mail/outlook/queue/.noindex # informs mu not to index this dir
#+END_SRC

Enable viewing images inline.
#+BEGIN_SRC emacs-lisp
;; Enable inline images
(setq mu4e-view-show-images t)
;; use imagemagick support
(when (fboundp 'imagemagick-register-types)
  (imagemagick-register-types))
#+END_SRC

Display rich-text messages in HTML. Set =shr-color-visible-luminance-min= to 80 if I am using dark theme.
#+BEGIN_SRC emacs-lisp
(setq mu4e-view-prefer-html t)

(add-hook 'mu4e-view-mode-hook
	  (lambda()
	    ;; try to emulate some of the eww key-bindings
	    (local-set-key (kbd "<tab>") 'shr-next-link)
	    (local-set-key (kbd "<backtab>") 'shr-previous-link)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; Use fancy non-ASCII char in various places
(setq mu4e-use-fancy-chars t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; Works better for mbsync
(setq mu4e-change-filenames-when-moving t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq mu4e-completing-read-function 'ivy-completing-read)
#+END_SRC

Gets an audio notification when indexing process sees an update.
#+BEGIN_SRC emacs-lisp :tangle no
(add-hook 'mu4e-index-updated-hook
  (defun new-mail-sound ()
    (shell-command "mpv ~/Sounds/prayer_bell.mp3&")))
#+END_SRC

Speed up mu4e html rendering speed. It's very slow whenever I open an email.
Dependency: =w3m=.
#+BEGIN_SRC emacs-lisp
;; (setq mu4e-html2text-command "w3m -T text/html")

(setq w3m-default-display-inline-images t)

;; Source: https://etienne.depar.is/emacs.d/mu4e.html
(setq mu4e-html2text-command "w3m -dump -I utf8 -O utf8 -T text/html -cols 72 -o display_link_number=true -o auto_image=true -o display_image=true -o ignore_null_img_alt=true")
#+END_SRC

Open unreadable file in browser.
#+BEGIN_SRC emacs-lisp
(add-to-list 'mu4e-view-actions
  '("ViewInBrowser" . mu4e-action-view-in-browser) t)
#+END_SRC

*** Personal Settings

Maildirs that I use frequently; access them with 'j' ('jump').
#+BEGIN_SRC emacs-lisp
(setq mu4e-maildir-shortcuts
      '(("/Inbox" . ?i)
	("/Archives/2019" . ?a)
	("/Deleted" . ?d)
	("/Sent" . ?s)))
#+END_SRC

Defines mu4e search bookmarks.
#+BEGIN_SRC emacs-lisp
(setq mu4e-bookmarks
  `( ,(make-mu4e-bookmark
       :name  "Inbox unread messages"
       :query "maildir:/Inbox AND flag:unread"
       :key ?u)
     ,(make-mu4e-bookmark
       :name "Today's messages"
       :query "date:today..now"
       :key ?t)
     ,(make-mu4e-bookmark
       :name "Last 7 days"
       :query "date:7d..now"
       :key ?w)
     ,(make-mu4e-bookmark
       :name "Flagged in INBOX"
       :query "maildir:\"/INBOX\" and flag:flagged"
       :key ?f)
     ,(make-mu4e-bookmark
       :name  "Inbox messages with pdf attachment"
       :query "mime:application/pdf and maildir:/Inbox"
       :key ?a)))
#+END_SRC

Override the default directory for saving attachements.
#+BEGIN_SRC emacs-lisp
(setq mu4e-attachment-dir "~/Downloads")
#+END_SRC

** ob-ipython

[Archived] 
1. There is no instruction on start using it. How to start using it?
2. The package is out of maintenance. Replaced by package emacs-jupyter.
#+BEGIN_EXAMPLE
Traceback (most recent call last):
  File "/home/zacque/.emacs.d/elpa/ob-ipython-20180224.953/client.py", line 60, in <module>
    c = create_client(args.conn_file)
  File "/home/zacque/.emacs.d/elpa/ob-ipython-20180224.953/client.py", line 43, in create_client
    cf = find_connection_file('emacs-' + name)
  File "/home/zacque/.local/lib/python3.6/site-packages/jupyter_client/connect.py", line 218, in find_connection_file
    raise IOError("Could not find %r in %r" % (filename, path))
OSError: Could not find 'emacs-mtpltlib' in ['.', '/run/user/1000/jupyter']
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
(require-package 'ob-ipython)
#+END_SRC

References:
1. http://kitchingroup.cheme.cmu.edu/blog/2017/01/29/ob-ipython-and-inline-figures-in-org-mode/
2. http://cachestocaches.com/2018/6/org-literate-programming/
3. https://github.com/gregsexton/ob-ipython

** Vim-like End-of-File Trailing Tildes

[Archived] I don't think I really find it to be useful.

Like VIM, make my Emacs files display tildes after EOF [fn:5].
#+BEGIN_SRC emacs-lisp
(setq-default indicate-empty-lines t)
(define-fringe-bitmap 'tilde [0 0 0 113 219 142 0 0] nil nil 'center)
(setcdr (assq 'empty-line fringe-indicator-alist) 'tilde)
(set-fringe-bitmap-face 'tilde 'font-lock-function-name-face)
#+END_SRC

** Org-Caldav

Note: Package oauth2 is needed for sync to Google cal.
#+BEGIN_SRC emacs-lisp
(require-package 'org-caldav)
(require-package 'oauth2)
#+END_SRC

Because Org-caldav uses iCalendar under the hood.
#+BEGIN_SRC emacs-lisp
(setq org-icalendar-timezone "+08")
(setq org-icalendar-alarm-time "30")
(setq org-icalendar-use-deadline '(event-if-not-todo todo-due))
(setq org-icalendar-use-scheduled '(todo-start))
(setq org-icalendar-include-sexps t)
(setq org-icalendar-include-todo 'all)
#+END_SRC

Org will evaluate code block on export. This will disable it to speed up export to iCalendar format.
#+SOURCE: https://emacs.stackexchange.com/a/50359
#+BEGIN_SRC emacs-lisp
(setq org-export-use-babel nil)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-export-select-tags '("export" "ical"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-icalendar-combined-agenda-file (jh/file-in-sync-directory "org" "org.ics"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-caldav-url 'google)
(setq org-caldav-oauth2-client-id "**REMOVED**")
(setq org-caldav-oauth2-client-secret "**REMOVED**")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-caldav-select-tags '("ical"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-caldav-sync-direction 'org->cal)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-caldav-calendars `((
                              :calendar-id ,(password-store-get-field "personal-info" "personal-gmail")
                              :files (,(jh/file-in-sync-directory "org" "personal.txt"))
                              :inbox ,(jh/file-in-sync-directory "org" "google_caldav.org"))))
#+END_SRC

** Flycheck Mode

Flycheck was once a superior alternative to Flymake. Since Emacs version 26.1, it introduces a new re-written Flymake. So the difference is now not so big. Feel free to check out the discussion here [fn:20].
#+BEGIN_SRC emacs-lisp
(require-package 'flycheck)
(global-flycheck-mode)
#+END_SRC

** KeyFreq

#+BEGIN_SRC emacs-lisp
(require 'keyfreq)
(keyfreq-mode 1)
(keyfreq-autosave-mode 1)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq keyfreq-file (jh/emacs-subdirectory "emacs.keyfreq"))
#+END_SRC

** ERC -- IRC Client

#+BEGIN_SRC emacs-lisp
(require 'erc)
(diminish 'erc-mode " Œµ")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq erc-server-coding-system '(utf-8 . utf-8))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq erc-autojoin-channels-alist '(("freenode.net" "#python" "#erc" "#emacs" "#org-mode" "##rust" "#startups" "#android-dev" "#linux" "#scheme" "#lisp" "#guile" "#vim")))
#+END_SRC

Hide the JOIN, PART, QUIT messages that clutter my chats.
#+BEGIN_SRC emacs-lisp
(setq erc-hide-list '("JOIN" "PART" "QUIT"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq erc-kill-buffer-on-part t)
(setq erc-kill-queries-on-quit t)
(setq erc-kill-server-buffer-on-quit t)
#+END_SRC

Align nickname?
#+BEGIN_SRC emacs-lisp
(require 'erc-fill)
(setq erc-fill-function 'erc-fill-static)
(setq erc-fill-static-center 19)
#+END_SRC

Enable logging in ERC.
#+BEGIN_SRC emacs-lisp
;; Logging
;; Useful for reading back the previous records.
(require 'erc-log)
(add-to-list 'erc-modules 'log)
(erc-update-modules)

(setq erc-log-channels-directory "~/.irc/logs")

(if (not (file-exists-p erc-log-channels-directory))
    (mkdir erc-log-channels-directory t))

(setq erc-save-buffer-on-part t)
;; (defadvice save-buffers-kill-emacs (before save-logs (arg) activate)
;;   (save-some-buffers t (lambda () (when (eq major-mode 'erc-mode) t))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(require-package 'erc-hl-nicks)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(require-package 'erc-image)
(add-to-list 'erc-modules 'image)
(erc-update-modules)
#+END_SRC

References:
1. http://wiki.xkcd.com/irc/Hide_join_part_messages
2. https://github.com/bbatsov/emacs-dev-kit/blob/master/erc-config.el
   A good config for ERC.
3. https://www.reddit.com/r/emacs/comments/8ml6na/tip_how_to_make_erc_fun_to_use/
   For future reference.
4. http://emacslife.com/transcripts/2014-04-07%20Emacs%20NYC%20-%20IRC%20with%20ERC%20-%20Eric%20Collins.html

** Aweshell
Archived: It heavily slows down my eshell.
https://github.com/manateelazycat/aweshell

Trying it out <2019-06-06 Thu>.
#+BEGIN_SRC emacs-lisp
(require 'aweshell)
#+END_SRC

** Org-sticky-header
#+BEGIN_SRC emacs-lisp
(require-package 'org-sticky-header)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'org-sticky-header-mode)
#+END_SRC

** Org-make-toc
#+BEGIN_SRC emacs-lisp
(require-package 'org-make-toc)
#+END_SRC

#+RESULTS:
: org-make-toc

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook #'org-make-toc-mode)
#+END_SRC

** EXWM -- Use Emacs as a Window Manager

*** Basic Setup

#+BEGIN_SRC emacs-lisp
(require-package 'exwm)
(require 'exwm-config)
#+END_SRC

Show all EXWM buffers in all workspaces.
#+BEGIN_SRC emacs-lisp
(setq exwm-workspace-show-all-buffers t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq exwm-layout-show-all-buffers t)
#+END_SRC

Able to resize non-floating buffer with mouse.
#+BEGIN_SRC emacs-lisp
(window-divider-mode)
#+END_SRC

*** Utils

#+BEGIN_SRC emacs-lisp
(defun switch-to-last-buffer ()
  "Switch to last open buffer in current window."
  (interactive)
  (switch-to-buffer (other-buffer (current-buffer) 1)))

(exwm-input-set-key (kbd "s-<tab>") #'switch-to-last-buffer)
#+END_SRC

*** Auto-Generate an Appropriate Name to Each EXWM Buffer

#+BEGIN_SRC emacs-lisp
(add-hook 'exwm-update-class-hook
          (lambda ()
            (unless (or (string-prefix-p "sun-awt-X11-" exwm-instance-name)
                        (string= "gimp" exwm-instance-name))
              (exwm-workspace-rename-buffer exwm-class-name))))
(add-hook 'exwm-update-title-hook
          (lambda ()
            (when (or (not exwm-instance-name)
                      (string-prefix-p "sun-awt-X11-" exwm-instance-name)
                      (string= "gimp" exwm-instance-name))
              (exwm-workspace-rename-buffer exwm-title))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-hook 'exwm-update-title-hook (lambda () (exwm-workspace-rename-buffer exwm-title)))
#+END_SRC

Note: This function keeps giving out-of-range errors with pop-up windows.
#+BEGIN_SRC emacs-lisp :tangle no
;; SOURCE: https://github.com/ch11ng/exwm/issues/365#issuecomment-368338923
(defun exwm-rename-buffer ()
  "Rename buffers to X window titles."
  (interactive)
  (exwm-workspace-rename-buffer
   (concat exwm-class-name ": "
	   (if (<= (length exwm-title) 16) exwm-title
	     (concat (substring exwm-title 0 20) "...")))))
(add-hook 'exwm-update-class-hook 'exwm-rename-buffer)
(add-hook 'exwm-update-title-hook 'exwm-rename-buffer)
#+END_SRC

References:
1. https://github.com/ch11ng/exwm/wiki/Configuration-Example

*** RandR (Multi-screen)

#+BEGIN_SRC emacs-lisp
(require 'exwm-randr)
#+END_SRC

The number of workspace should not be less than the number of monitors.
#+BEGIN_SRC emacs-lisp
(setq exwm-workspace-number 2)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq exwm-randr-workspace-output-plist '(1 "eDP-1-1" 0 "HDMI-1-2"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun jh/--exwm-second-screen-vertical-at-right ()
  "Place a monitor display next to my laptop monitor. The external monitor is configured as vertical and placed to the right."
  (start-process-shell-command
   "xrandr" nil "xrandr --output eDP-1-1 --primary --output HDMI-1-2 --rotate left --right-of eDP-1-1 --auto"))

(defun jh/--exwm-second-screen-vertical-at-left ()
  "Place a monitor display next to my laptop monitor. The external monitor is configured as vertical and placed to the right."
  (start-process-shell-command
   "xrandr" nil "xrandr --output eDP-1-1 --primary --output HDMI-1-2 --rotate left --left-of eDP-1-1 --auto"))

(defun jh/exwm-second-vertical-screen-place-at-left ()
  "Configure the second screen to place at left to my laptop monitor."
  (interactive)
  (remove-hook 'exwm-randr-screen-change-hook #'jh/--exwm-second-screen-vertical-at-right)
  (add-hook 'exwm-randr-screen-change-hook #'jh/--exwm-second-screen-vertical-at-left)
  (jh/--exwm-second-screen-vertical-at-left))

(defun jh/exwm-second-vertical-screen-place-at-right ()
  "Configure the second screen to place at left to my laptop monitor."
  (interactive)
  (remove-hook 'exwm-randr-screen-change-hook #'jh/--exwm-second-screen-vertical-at-left)
  (add-hook 'exwm-randr-screen-change-hook #'jh/--exwm-second-screen-vertical-at-right)
  (jh/--exwm-second-screen-vertical-at-right))
#+END_SRC

Place to the right by default.
#+BEGIN_SRC emacs-lisp
(add-hook 'exwm-randr-screen-change-hook #'jh/--exwm-second-screen-vertical-at-left)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(exwm-randr-enable)
#+END_SRC

*** EXWM Key Bindings
Note: EXWM or X11 related key are defined with Super perfix key.

#+BEGIN_SRC emacs-lisp
;; USE EXWM KEY TO RUN COMMANDS
;; SOURCE: https://github.com/vbuaraujo/emacs-configs/blob/master/init-exwm.el
(defun exwm-command-shortcut (key command)
  (exwm-input-set-key key
		      `(lambda ()
			 (interactive)
			 (start-process "exwm-shortcut" nil "sh" "-c" ,command))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(exwm-input-set-key (kbd "s-SPC") 'counsel-linux-app)
(exwm-input-set-key (kbd "s-t") 'eshell)
(exwm-input-set-key (kbd "s-s") 'jh/counsel-search)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(exwm-input-set-key (kbd "s-i") 'exwm-input-toggle-keyboard)
(exwm-input-set-key (kbd "s-w") 'exwm-workspace-switch)
(exwm-input-set-key (kbd "s-r") 'rename-buffer)
(exwm-input-set-key (kbd "s-m") 'exwm-workspace-move-window)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; https://www.reddit.com/r/emacs/comments/6huok9/exwm_configs/dkvt5bs
(exwm-input-set-key (kbd "s-h") #'windmove-left)
(exwm-input-set-key (kbd "s-j") #'windmove-down)
(exwm-input-set-key (kbd "s-k") #'windmove-up)
(exwm-input-set-key (kbd "s-l") #'windmove-right)
#+END_SRC

Check out: Hydra + Ace-window. https://www.youtube.com/watch?v=_qZliI1BKzI
#+BEGIN_SRC emacs-lisp
(require 'buffer-move)
(exwm-input-set-key (kbd "s-C-h") #'buf-move-left)
(exwm-input-set-key (kbd "s-C-j") #'buf-move-down)
(exwm-input-set-key (kbd "s-C-k") #'buf-move-up)
(exwm-input-set-key (kbd "s-C-l") #'buf-move-right)
#+END_SRC

#+RESULTS:

#+BEGIN_SRC emacs-lisp
;; SOURCE: https://github.com/ch11ng/exwm/wiki/Configuration-Example
(setq exwm-input-simulation-keys
      '(
	;; ;; movement
	;; ([?\C-b] . [left])
	;; ([?\M-b] . [C-left])
	;; ([?\C-f] . [right])
	;; ([?\M-f] . [C-right])
	;; ([?\C-p] . [up])
	;; ([?\C-n] . [down])
	;; ([?\C-a] . [home])
	;; ([?\C-e] . [end])
	;; ([?\M-v] . [prior])
	;; ([?\C-v] . [next])
	;; ([?\C-d] . [delete])
	;; ([?\C-k] . [S-end delete])

	([?\C-c C-c] . [?\C-c])

	;; cut/paste.
	([?\M-w] . [?\C-c])
	([?\C-y] . [?\C-v])))
#+END_SRC

*** EXWM Enable

#+BEGIN_SRC emacs-lisp
(exwm-enable)
#+END_SRC

** Emacs Dashboard as Startup Screen

Use dashboard package as my startup page.
#+BEGIN_SRC emacs-lisp
(require 'dashboard)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(dashboard-setup-startup-hook)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun jh/goto-dashboard-buffer ()
  "Switch to *dashboard* buffer. Create one if the buffer does not exist."
  (interactive)
  (get-buffer-create "*dashboard*")
  (set-buffer "*dashboard*")
  (dashboard-refresh-buffer))

(setq initial-buffer-choice 'jh/goto-dashboard-buffer)
#+END_SRC

Disable package loading init time. I don't find it useful.
#+BEGIN_SRC emacs-lisp
(setq dashboard-set-init-info nil)
#+END_SRC

Replace the ugly Emacs logo with Z(acque) logo.
#+BEGIN_SRC emacs-lisp
(setq dashboard-startup-banner
      (jh/emacs-subdirectory "images/startup_logo/small_yellow_z.png"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq dashboard-banner-logo-title
      (concat "Happy hacking, " (upcase-initials user-login-name) " - Emacs ‚ô• you!"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq dashboard-set-file-icons t)
(setq dashboard-set-heading-icons nil)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq dashboard-center-content t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq dashboard-footer "\"‰∏çÊÄïÊÖ¢ÔºåÂè™ÊÄïÁ´ô„ÄÇÁ≤æËØöÊâÄËá≥ÔºåÈáëÁü≥‰∏∫ÂºÄ„ÄÇ\"                 ")
(setq dashboard-footer-icon "")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq dashboard-set-navigator t)

(setq dashboard-navigator-buttons
      `(((,(all-the-icons-octicon "globe" :height 0.8 :v-adjust 0.1)
          "Homepage" "Browse homepage"
          (lambda (&rest _) (browse-url "https://ddg.gg")))

         (,(all-the-icons-material "search")
          "Search" "Search DuckDuckGo"
          (lambda (&rest _) (jh/counsel-search)))

         (,(all-the-icons-faicon "play" :height 0.8 :v-adjust 0.1)
          "YouTube" "Browse YouTube homepage"
          (lambda (&rest _) (browse-url "https://youtube.com")))

         (,(all-the-icons-faicon "rss" :v-adjust -0.1)
          "Feed" "Browse RSS feeds"
          (lambda (&rest _) (elfeed))))))
#+END_SRC

Use key bindings that makes sense to me.
#+BEGIN_SRC emacs-lisp
(define-key dashboard-mode-map (kbd "j") #'widget-forward)
(define-key dashboard-mode-map (kbd "n") #'widget-forward)
(define-key dashboard-mode-map (kbd "k") #'widget-backward)
(define-key dashboard-mode-map (kbd "p") #'widget-backward)
(define-key dashboard-mode-map (kbd "<tab>") #'dashboard-next-section)
(define-key dashboard-mode-map (kbd "TAB") #'dashboard-next-section)
(define-key dashboard-mode-map (kbd "<backtab>") #'dashboard-previous-section)
(define-key dashboard-mode-map (kbd "S-TAB") #'dashboard-previous-section)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'evil
  (evil-set-initial-state 'dashboard-mode 'emacs))
#+END_SRC

References:
1. https://github.com/emacs-dashboard/emacs-dashboard

** Ansi-Term

#+BEGIN_SRC emacs-lisp
(require 'term)
#+END_SRC

Remove the prompt.
#+BEGIN_SRC emacs-lisp
(setq explicit-shell-file-name "/bin/bash") ;; use bash by default
#+END_SRC

Kill the buffer after exiting the term.
#+BEGIN_SRC emacs-lisp
;; Source: https://oremacs.com/2015/01/01/three-ansi-term-tips/
(defun oleh-term-exec-hook ()
  (let* ((buff (current-buffer))
         (proc (get-buffer-process buff)))
    (set-process-sentinel
     proc
     `(lambda (process event)
        (if (string= event "finished\n")
            (kill-buffer ,buff))))))

(add-hook 'term-exec-hook 'oleh-term-exec-hook)
#+END_SRC

I couldn't remember which key is for which line/char-mode in term. Simply turn it into a toggle. Source: https://joelmccracken.github.io/entries/switching-between-term-mode-and-line-mode-in-emacs-term/
#+BEGIN_SRC emacs-lisp
(defun jnm/term-toggle-mode ()
  "Toggles term between line mode and char mode"
  (interactive)
  (if (term-in-line-mode)
      (term-char-mode)
    (term-line-mode)))

(define-key term-mode-map (kbd "C-c C-j") 'jnm/term-toggle-mode)
(define-key term-mode-map (kbd "C-c C-k") 'jnm/term-toggle-mode)

(define-key term-raw-map (kbd "C-c C-j") 'jnm/term-toggle-mode)
(define-key term-raw-map (kbd "C-c C-k") 'jnm/term-toggle-mode)
#+END_SRC

My ansi-term is black and white. This should make it more colourful.
#+BEGIN_SRC emacs-lisp
(require-package 'eterm-256color)
(add-hook 'term-mode-hook #'eterm-256color-mode)
#+END_SRC

This avoids some inputs from going to a newline before reaching the end.
#+BEGIN_SRC emacs-lisp
;; SOURCE: https://emacs.stackexchange.com/a/37831
(setq term-suppress-hard-newline t)
#+END_SRC

** Check Hanging Parenthesis

The main problem I have using literate programming mode is the hanging parenthesis.

#+BEGIN_SRC emacs-lisp
(defun xah-check-parens-balance ()
  "Check if there are unbalanced parentheses/brackets/quotes in current bufffer or selection.
If so, place cursor there, print error to message buffer.

URL `http://ergoemacs.org/emacs/emacs_check_parens_balance.html'
Version 2018-07-03"
  (interactive)
  (let* (
         ($bracket-alist
          '( (?‚Äú . ?‚Äù) (?‚Äπ . ?‚Ä∫) (?¬´ . ?¬ª) (?„Äê . ?„Äë) (?„Äñ . ?„Äó) (?„Äà . ?„Äâ) (?„Ää . ?„Äã) (?„Äå . ?„Äç) (?„Äé . ?„Äè) (?{ . ?}) (?\[ . ?\]) (?\( . ?\))))
         ;; regex string of all pairs to search.
         ($bregex
          (let (($tempList nil))
            (mapc
             (lambda (x)
               (push (char-to-string (car x)) $tempList)
               (push (char-to-string (cdr x)) $tempList))
             $bracket-alist)
            (regexp-opt $tempList )))
         $p1
         $p2
         ;; each entry is a vector [char position]
         ($stack '())
         ($char nil)
         $pos
         $is-closing-char-p
         $matched-open-char
         )
    (if (region-active-p)
        (setq $p1 (region-beginning) $p2 (region-end))
      (setq $p1 (point-min) $p2 (point-max)))

    (save-excursion
      (save-restriction
        (narrow-to-region $p1 $p2)
        (progn
          (goto-char 1)
          (while (re-search-forward $bregex nil "move")
            (setq $pos (point))
            (setq $char (char-before))
            (progn
              (setq $is-closing-char-p (rassoc $char $bracket-alist))
              (if $is-closing-char-p
                  (progn
                    (setq $matched-open-char
                          (if $is-closing-char-p
                              (car $is-closing-char-p)
                            (error "logic error 64823. The char %s has no matching pair."
                                   (char-to-string $char))))
                    (if $stack
                        (if (eq (aref (car $stack) 0) $matched-open-char )
                            (pop $stack)
                          (push (vector $char $pos) $stack ))
                      (progn
                        (goto-char $pos)
                        (error "First mismtach found. the char %s has no matching pair."
                               (char-to-string $char)))))
                (push (vector $char $pos) $stack ))))
          (if $stack
              (progn
                (goto-char (aref (car $stack) 1))
                (message "Mismtach found. The char %s has no matching pair." $stack))
            (print "All brackets/quotes match.")))))))
#+END_SRC

** Immortal Scratch

#+BEGIN_SRC emacs-lisp
(require-package 'immortal-scratch)
(add-hook 'after-init-hook 'immortal-scratch-mode)
#+END_SRC

** WindMove & FrameMove
#+BEGIN_SRC emacs-lisp
(require 'windmove)
#+END_SRC

Use FrameMove to extend WindMove's ability to move across Emacs frames.
#+BEGIN_SRC emacs-lisp
(require 'framemove)
(setq framemove-hook-into-windmove t)
#+END_SRC
** Org-Latex
Turn table into subfigure.
#+BEGIN_SRC emacs-lisp
(require 'ox-latex-subfigure)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-latex-prefer-user-labels t)
#+END_SRC

References:
1. github:linktohack/ox-latex-subfigure
** External Program Dependencies

As my Emacs is tightly integrated with my OS (Arch Linux/Ubuntu), there are libraries that will not work if the executable is not found.

Check if an executable is installed.
#+BEGIN_SRC emacs-lisp
(defun check-executable-is-installed (exe &optional msg)
  "Check if an executable is installed."
  (unless (executable-find exe)
    (message (concat "'" exe "' not found. " msg))))
#+END_SRC

[TODO] If the executable is not installed, install them at Emacs boot up.
#+BEGIN_SRC emacs-lisp :tangle no

#+END_SRC

** Org Sidebar

#+BEGIN_SRC emacs-lisp
(require-package 'org-sidebar)
#+END_SRC

** Hydra

#+BEGIN_SRC emacs-lisp
(require-package 'hydra)
#+END_SRC

** Multiple-cursors

#+BEGIN_SRC emacs-lisp
(require-package 'multiple-cursors)
#+END_SRC

** Company-Jedi
Note: Not using for now because it relies on virtualenv.
#+BEGIN_SRC emacs-lisp
(use-package company-jedi
  :requires company
  :config
  (defun jh/--temp-python-mode-hook ()
    (add-to-list 'company-backends 'company-jedi))

  (add-hook 'python-mode-hook 'jh/--temp-python-mode-hook))
#+END_SRC
** Printing

#+BEGIN_SRC emacs-lisp
(setq ps-line-number t) ; print with line numbers
#+END_SRC

Printer at my dorm can only print black-and-white colours.
#+BEGIN_SRC emacs-lisp
(setq ps-print-color-p 'black-white) ; always print black-and-white
#+END_SRC

** GC Tweaks

Emacs GC optimisation.

[Disabled] Knowing when the GC is running. 
[Reason] It's annoying to keep seeing the message popping up.
#+BEGIN_SRC emacs-lisp :tangle no
(setq garbage-collection-messages t)
#+END_SRC

Set GC threshold to 1GB.
#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold #x40000000)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defmacro k-time (&rest body)
  "Measure and return the time it takes evaluating BODY."
  `(let ((time (current-time)))
     ,@body
     (float-time (time-since time))))

;; When idle for 15sec run the GC no matter what.
(defvar k-gc-timer
  (run-with-idle-timer 15 t (lambda () (garbage-collect))))
#+END_SRC

References:
1. http://akrl.sdf.org/
   Emacs garbage collection magic hack
2. https://www.reddit.com/r/emacs/comments/cbyza2/emacs_slight_lag_allocate_more_ram_garbage/
   Where I found out about the "magic hack".

** Terraform-doc

[Archived] Lookup docs from Terraform homepage.
Reason: Replace by dash docs.
#+BEGIN_SRC emacs-lisp
(require-package 'terraform-doc)
#+END_SRC

References: 
1. https://github.com/TxGVNN/terraform-doc

** Elpy -- Emacs Python Development Environment
:PROPERTIES:
:header-args: :tangle no
:END:
[Archived] Elpy depends on the 'virtualenv' python package.

Elpy turns Emacs into a Python IDE. Getting ideas from these sources. 
#+BEGIN_SRC emacs-lisp
(use-package elpy
  :init
  (elpy-enable))
#+END_SRC

#+RESULTS:

It relies on =Jedi= for backend introspection and analysis of Python sources. Jedi is known to have problems coping with badly-formatted Python.
#+BEGIN_SRC shell :dir /sudo::
pip install jedi flake8
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq elpy-rpc-python-command "python3")
(setq elpy-rpc-virtualenv-path 'current)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun jh/--enable-elpy ()
  (elpy-enable))
(add-hook 'python-mode-hook #'jh/--enable-elpy)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(define-key elpy-mode-map [remap elpy-shell-kill-all] nil)
#+END_SRC

These are packages that work well with Elpy:
1. flycheck (as the Flymake alternative)
   #+BEGIN_SRC emacs-lisp
   (when (require 'flycheck nil t)
       (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
       (add-hook 'elpy-mode-hook 'flycheck-mode))
   #+END_SRC

2. py-autopep8
   #+BEGIN_SRC emacs-lisp
   (require-package 'py-autopep8)
   (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
   #+END_SRC

3. ein (Ipython/Jupyter integration)
   #+BEGIN_SRC emacs-lisp :tangle no
   (elpy-use-ipython)
   #+END_SRC

Error: elpy-use-ipython is deprecated; see https://elpy.readthedocs.io/en/latest/ide.html#interpreter-setup

References:
1. https://realpython.com/emacs-the-best-python-editor/
* Disabled                    :noexport:
:PROPERTIES:
:header-args: :tangle no
:END:
** SQL Database

Emacs has a built-in SQL suite that includes SQL highlighting and SQL consoles for all major players: SQL mode and a function =sql-ms= that can connect to a database.

It depends on the =osql= and =isql= program. This can be installed on Ubuntu.
#+BEGIN_SRC sh :dir /sudo::
sudo apt install freetds-bin unixodbc
#+END_SRC

#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((sql . t)))
#+END_SRC

** GNU Global

#+BEGIN_SRC emacs-lisp
(require-package 'ggtags)
#+END_SRC

** Enable Geiser Mode
  
The official website is here [fn:7]. 
#+BEGIN_SRC emacs-lisp
(require-package 'geiser)
#+END_SRC
  
Set guile as the default choice. No need to ask for confirmation everytime.
#+BEGIN_SRC emacs-lisp
(setq geiser-active-implementations '(guile))
#+END_SRC

Configure org-tangle to export scheme file to end with .scm. By default, it ends with .scheme extension.
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-babel-tangle-lang-exts '("scheme" . "scm"))
#+END_SRC

** Enable Web-Mode

#+BEGIN_SRC emacs-lisp
(require-package 'web-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq web-mode-enable-current-element-highlight t)
#+END_SRC

This web-mode uses =evil-matchit= package to jump between closing and opening HTML tags.

** Enable PHP-Mode

#+BEGIN_SRC emacs-lisp
(require-package 'php-mode)
#+END_SRC

** Enable YAML Mode

This is useful to edit =docker-compose.yml= file.
#+BEGIN_SRC emacs-lisp
;; YAML Mode
(require-package 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))

(add-hook 'yaml-mode-hook
	  '(lambda ()
	     (define-key yaml-mode-map "\C-m" 'newline-and-indent)))
#+END_SRC

*** Readable YAML

To make YAML readable:
1. Highlight indentation.
   #+BEGIN_SRC emacs-lisp
   (add-hook 'yaml-mode-hook 'highlight-indentation-mode)
   #+END_SRC
   Refer to: [[*Highlight Indentation][Highlight Indentation in Python Mode]]

2. Folds all code on an higher indentation level to view the outline.
   #+BEGIN_SRC emacs-lisp
   ;; Source: https://stackoverflow.com/a/4459159
   (defun aj-toggle-fold (&optional arg)
     "Toggle fold all lines larger than indentation on current line"
     (interactive)
     (let ((col 1))
       (save-excursion
         (back-to-indentation)
         (setq col (+ 1 (current-column)))
         (set-selective-display
          (if selective-display nil (or col 1))))))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
   (defun evil-yaml-mode ()
     "Override default evil key bindings for yaml mode."
     (evil-define-key 'normal yaml-mode-map
       "za" 'aj-toogle-fold))

   (add-hook 'yaml-mode-hook 'evil-yaml-mode)
   #+END_SRC

References:
1. https://blog.chmouel.com/2016/09/07/dealing-with-yaml-in-emacs/

** Enable Rust-Mode

#+BEGIN_SRC emacs-lisp
(require-package 'rust-mode)
#+END_SRC

Automatic runs =rust-format-buffer= during saves. By default, it is bound to =C-c C-f=.
#+BEGIN_SRC emacs-lisp
(setq rust-format-on-save t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(require-package 'flycheck-rust)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-hook 'flycheck-mode-hook #'flycheck-rust-setup)
#+END_SRC

*** Ob-Rust

[Prerequisite] Install =rust=, =cargo=, and =cargo-script=.
#+BEGIN_SRC shell
cargo install cargo-script
#+END_SRC

#+BEGIN_SRC emacs-lisp
(require-package 'ob-rust)
#+END_SRC

*** Elpy

I have Rust Language Server installed.
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'eglot
  (add-hook 'rust-mode-hook 'eglot-ensure))
#+END_SRC

References:
1. https://github.com/rust-lang/rls

** Enable Groovy Mode for Gradle

Gradle is Groovy DSL.

#+BEGIN_SRC emacs-lisp
(require-package 'groovy-mode)
#+END_SRC

*** Define a derived gradle-mode
:PROPERTIES:
:header-args: :tangle ./lisp/gradle-mode/gradle-mode.el
:END:

Derive and define gradle-mode from groovy-mode. Note: This code will be tangled to the lisp dir.
#+BEGIN_SRC emacs-lisp
;;; gradle-mode.el --- An emacs major mode for editing gradle files.

;; Copyright (C) 2019  Lee Jia Hong

;; Author: Lee Jia Hong
;; Keywords: languages
;; Version: 0.0.1

;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.

;;; Commentary:

;; A mode for editing gradle files.
;;

;;; Code:
(require 'groovy-mode)

(defvar gradle-constants '())

(defvar gradle-keywords '())

(defvar gradle-tab-width 4 "Width for a tab for gradle mode")

(defvar gradle-font-lock-defaults '(()))

(add-to-list 'auto-mode-alist '("\.gradle$" . gradle-mode))

(define-derived-mode gradle-mode groovy-mode "Gradle mode"
  "Gradle mode is a major mode for editing gradle file"
  (setq font-lock-defaults groovy-font-lock-keywords)

  (when gradle-tab-width
    (setq tab-width gradle-tab-width))

  (setq comment-start "//")
  (setq comment-end "")
)

(provide 'gradle-mode)
;;; gradle-mode.el ends here
#+END_SRC

*** Gradle-mode

#+BEGIN_SRC emacs-lisp :tangle no
(require 'gradle-mode)
#+END_SRC

** Enable BNF-Mode

For editing BNF grammars.
#+BEGIN_SRC emacs-lisp
(require-package 'bnf-mode)
#+END_SRC

References:
1. https://github.com/sergeyklay/bnf-mode

** Enable ini-mode

#+BEGIN_SRC emacs-lisp
(require 'ini-mode)
(add-to-list 'auto-mode-alist '("\\.ini\\'" . ini-mode))
#+END_SRC

References:
1. https://github.com/Lindydancer/ini-mode

** Enable toml-mode

#+BEGIN_SRC emacs-lisp
(require-package 'toml-mode)
#+END_SRC

** Restclient for Testing API

#+BEGIN_SRC emacs-lisp
(require-package 'restclient)
(require-package 'ob-restclient)
#+END_SRC

Load org-babel for restclient. 
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages 'org-babel-load-languages '((restclient . t)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(require-package 'company-restclient)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-to-list 'company-backends 'company-restclient)
#+END_SRC

** Managing System Services

Managing system services through Emacs.
#+BEGIN_SRC emacs-lisp
(require-package 'daemons)

(evil-set-initial-state 'daemons-mode 'emacs)
(evil-set-initial-state 'daemons-output-mode 'emacs)

(fullframe daemons quit-window)
#+END_SRC

** ProcEd
A tool for accessin ghte UNIX ps list.
#+BEGIN_SRC emacs-lisp
(require 'proced)
#+END_SRC

Use it like =top= tool.
#+BEGIN_SRC emacs-lisp
(add-hook 'proced-mode-hook 'proced-toggle-auto-update)
(setq proced-auto-update-interval 5)
#+END_SRC

References:
1. https://www.emacswiki.org/emacs/ProcEd

** Elfeed -- RSS Reader

#+BEGIN_SRC emacs-lisp
(require-package 'elfeed)
#+END_SRC

Open elfeed in fullframe.
#+BEGIN_SRC emacs-lisp
(fullframe elfeed elfeed-search-quit-window)
#+END_SRC

Override default search filter to including the =focus= tag.
#+BEGIN_SRC emacs-lisp
(setq-default elfeed-search-filter "@1-week-ago +unread +focus")
#+END_SRC

Sort from oldest to newest because I am not using RSS to catch the "latest" news. And I am expecting myself to go through all the feeds.
#+BEGIN_SRC emacs-lisp
(setq elfeed-sort-order 'ascending)
#+END_SRC

Override default database directory at home folder.
#+BEGIN_SRC emacs-lisp
(setq elfeed-db-directory (expand-file-name "elfeed" user-emacs-directory))
#+END_SRC

Start =elfeed= in =evil-emacs-mode=.
#+BEGIN_SRC emacs-lisp
(add-to-list 'evil-emacs-state-modes 'elfeed-search-mode)
(add-to-list 'evil-emacs-state-modes 'elfeed-show-mode)
#+END_SRC

Auto enable writeroom mode to centralise contents when I read Elfeed articles.
#+BEGIN_SRC emacs-lisp
(add-hook 'elfeed-show-mode 'writeroom-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(define-key elfeed-show-mode-map (kbd "f") 'scroll-up-command)
(define-key elfeed-show-mode-map (kbd "b") 'scroll-down-command)
(define-key elfeed-show-mode-map (kbd "o") 'elfeed-show-visit)
#+END_SRC

[Disable] Play video directly from the URL of a feed [fn:12]. (With a little modification to play "unlimited" resolution by default.
#+BEGIN_SRC emacs-lisp :tangle no
(defun elfeed-play-with-mpv ()
  "Play entry link with mpv."
  (interactive)
  (let ((entry (if (eq major-mode 'elfeed-show-mode) elfeed-show-entry (elfeed-search-selected :single)))
        (quality-arg "")
	(quality-val (completing-read "Max height resolution (0 for unlimited):" '("0" "480" "720") nil nil)))
    (setq quality-val (string-to-number quality-val))
    (message "Opening %s with height‚â§%s with mpv..." (elfeed-entry-link entry) quality-val)
    (when (< 0 quality-val)
      (setq quality-arg (format "--ytdl-format=[height<=?%s]" quality-val)))
    (start-process "elfeed-mpv" nil "mpv" quality-arg (elfeed-entry-link entry))))

(defun elfeed-open-with-eww ()
  "Open in eww with `eww-readable'."
  (interactive)
  (let ((entry (if (eq major-mode 'elfeed-show-mode) elfeed-show-entry (elfeed-search-selected :single))))
    (eww  (elfeed-entry-link entry))
    (add-hook 'eww-after-render-hook 'eww-readable nil t)))

(defvar elfeed-visit-patterns
  '(("//[^/]*youtu\\.?be" . elfeed-play-with-mpv)
    ("phoronix" . elfeed-open-with-eww))
  "List of (regexps . function) to match against elfeed entry link to know
whether how to visit the link.")

(defun elfeed-visit-maybe-externally ()
  "Visit with external function if entry link matches `elfeed-visit-patterns',
show normally otherwise."
  (interactive)
  (let ((entry (if (eq major-mode 'elfeed-show-mode)
                   elfeed-show-entry
                 (elfeed-search-selected :single)))
        (patterns elfeed-visit-patterns))
    (while (and patterns (not (string-match (caar patterns) (elfeed-entry-link entry))))
      (setq patterns (cdr patterns)))
    (cond
     (patterns
      (elfeed-untag entry 'unread)
      (elfeed-search-update-entry entry)
      (funcall (cdar patterns)))
     ((eq major-mode 'elfeed-search-mode)
      (call-interactively 'elfeed-search-show-entry))
     (t (elfeed-show-visit)))))

(define-key elfeed-show-mode-map [remap shr-browse-url] #'elfeed-visit-maybe-externally)
#+END_SRC

#+NAME: Elfeed_Dependency
#+BEGIN_SRC sh :dir /sudo::
apt install mpv youtube-dl curl
#+END_SRC

Use curl to fetch feed. This will be faster.
#+BEGIN_SRC emacs-lisp
(setq elfeed-use-curl t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; Source: https://emacs.stackexchange.com/a/2441
(defun jh/elfeed-mark-all-as-read()
  "Mark all messages as read."
  (interactive)
  (mark-whole-buffer)
  (elfeed-search-untag-all-unread))
#+END_SRC

Use elfeed-org to load feeds from an org file.
#+BEGIN_SRC emacs-lisp
(require-package 'elfeed-org)
#+END_SRC

Initialise elfeed-org to read the configuration file.
#+BEGIN_SRC emacs-lisp
(elfeed-org)
#+END_SRC

Define the org file used to store all the RSS links.
#+BEGIN_SRC emacs-lisp
(setq rmh-elfeed-org-files (list "~/.emacs.d/elfeed.org"))
#+END_SRC

** Ledger

#+BEGIN_SRC emacs-lisp
(require-package 'ledger-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.ledger$" . ledger-mode))
#+END_SRC

** Try: Try Out Emacs Packages

Works for packages on =package-archives= and also any elisp file from the Web.
#+BEGIN_SRC emacs-lisp
(require-package 'try)
#+END_SRC

References:
1. https://github.com/larstvei/try

* Footnotes

[fn:32] http://ergoemacs.org/emacs/emacs_shell_vs_term_vs_ansi-term_vs_eshell.html

[fn:31] https://writequit.org/denver-emacs/presentations/2017-04-11-time-clocking-with-org.html

[fn:30] http://doc.norang.ca/org-mode.html#Clocking

[fn:20] https://github.com/flycheck/flycheck/pull/1412

[fn:19] https://emacs.stackexchange.com/questions/38841/counsel-m-x-always-shows

[fn:18] http://tumashu.github.io/pyim/

[fn:15] https://emacs.stackexchange.com/questions/5608/how-to-let-eshell-remember-sudo-password-for-two-minutes

[fn:14] https://github.com/PythonNut/historian.el

[fn:13] https://github.com/purcell/emacs.d/blob/master/lisp/init-ivy.el

[fn:12] https://github.com/skeeto/elfeed/issues/267 OR https://gitlab.com/ambrevar/dotfiles/blob/master/.emacs.d/lisp/init-elfeed.el

[fn:7] http://www.nongnu.org/geiser/

[fn:6] https://github.com/politza/pdf-tools

[fn:5] https://www.reddit.com/r/emacs/comments/2kdztw/emacs_in_evil_mode_show_tildes_for_blank_lines/
